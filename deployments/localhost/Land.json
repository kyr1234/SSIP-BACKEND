{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "msgSender",
          "type": "address"
        }
      ],
      "name": "NotGovernmentOfficial",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PaymentAlreadyCompleted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransactionFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "landID",
          "type": "uint256"
        }
      ],
      "name": "LandIsRequestedToBuy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "landID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_area",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_address",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "landPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_allLatiLongi",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_propertyPID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "_surveyNum",
          "type": "string"
        }
      ],
      "name": "NewLandAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "useraddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_age",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_city",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_aadharNumber",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "_panNumber",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "_document",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_email",
          "type": "string"
        }
      ],
      "name": "NewUserRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "UserVerified",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "LandRequestMapping",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reqId",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "sellerId",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "buyerId",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "landId",
          "type": "uint256"
        },
        {
          "internalType": "enum Land.OwnerApprovalStatus",
          "name": "requestStatus",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "isPaymentDone",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "requestTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "enum Land.GovernmentApprovalStatus",
          "name": "govApprovalStatus",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ReturnAllLandList",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ReturnAllUserList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "UserMapping",
      "outputs": [
        {
          "internalType": "address",
          "name": "id",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "age",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "city",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "aadharNumber",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "panNumber",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "document",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "email",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "isUserVerified",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isExist",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "acceptRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_area",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_address",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "landPrice",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_allLatiLongi",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_propertyPID",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_surveyNum",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_document",
          "type": "string"
        }
      ],
      "name": "addLand",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "changeContractOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "name": "changeGovernmentFeesRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "status",
          "type": "uint256"
        }
      ],
      "name": "changeGovernmentStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "documentId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGovFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getUserByAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governmentFeesRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "isLandVerified",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "isUserRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "isUserRequestFulfilled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "id",
          "type": "address"
        }
      ],
      "name": "isUserVerified",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "landPrices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lands",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "area",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "landAddress",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "landPrice",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "allLatitudeLongitude",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "propertyPID",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "physicalSurveyNumber",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "document",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "isforSell",
          "type": "bool"
        },
        {
          "internalType": "address payable",
          "name": "ownerAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isLandVerified",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "landsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "makePayment",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "id",
          "type": "address"
        }
      ],
      "name": "myAllLands",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "myReceivedLandRequests",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mySentLandRequests",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_age",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_city",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_aadharNumber",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_panNumber",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_document",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_email",
          "type": "string"
        }
      ],
      "name": "registerUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "rejectRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_landId",
          "type": "uint256"
        }
      ],
      "name": "requestforBuy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "returnPaymentDoneList",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "userCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "verifyLand",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userWalletAddress",
          "type": "address"
        }
      ],
      "name": "verifyUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8f0d1631d5ec29ba7ee52f1e910608dac5f21bcecadb2bc9df19a9567634b284",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "4085907",
    "logsBloom": "0x
    "blockHash": "0x07205cdc1469f2b3a8c5979832e4abd089ef0ced9a65675f5fc0c6f9bf562897",
    "transactionHash": "0x8f0d1631d5ec29ba7ee52f1e910608dac5f21bcecadb2bc9df19a9567634b284",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "4085907",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9f6180ae9ca5cf1bf027eac89eed779c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"}],\"name\":\"NotGovernmentOfficial\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PaymentAlreadyCompleted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransactionFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"landID\",\"type\":\"uint256\"}],\"name\":\"LandIsRequestedToBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"landID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_area\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_address\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"landPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_allLatiLongi\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_propertyPID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_surveyNum\",\"type\":\"string\"}],\"name\":\"NewLandAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"useraddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_age\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_city\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_aadharNumber\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_panNumber\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_document\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_email\",\"type\":\"string\"}],\"name\":\"NewUserRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"UserVerified\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LandRequestMapping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reqId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"sellerId\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"buyerId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"landId\",\"type\":\"uint256\"},{\"internalType\":\"enum Land.OwnerApprovalStatus\",\"name\":\"requestStatus\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isPaymentDone\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"requestTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum Land.GovernmentApprovalStatus\",\"name\":\"govApprovalStatus\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ReturnAllLandList\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ReturnAllUserList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"UserMapping\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"age\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"city\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"aadharNumber\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"panNumber\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"document\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isUserVerified\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"acceptRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_area\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_address\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"landPrice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_allLatiLongi\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_propertyPID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_surveyNum\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_document\",\"type\":\"string\"}],\"name\":\"addLand\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"changeContractOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"changeGovernmentFeesRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"}],\"name\":\"changeGovernmentStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"documentId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGovFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserByAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governmentFeesRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"isLandVerified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isUserRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"isUserRequestFulfilled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"}],\"name\":\"isUserVerified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"landPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lands\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"area\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"landAddress\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"landPrice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"allLatitudeLongitude\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"propertyPID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"physicalSurveyNumber\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"document\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isforSell\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isLandVerified\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"landsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"makePayment\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"}],\"name\":\"myAllLands\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myReceivedLandRequests\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mySentLandRequests\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_age\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_city\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_aadharNumber\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_panNumber\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_document\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_email\",\"type\":\"string\"}],\"name\":\"registerUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"rejectRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_landId\",\"type\":\"uint256\"}],\"name\":\"requestforBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnPaymentDoneList\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"verifyLand\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userWalletAddress\",\"type\":\"address\"}],\"name\":\"verifyUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Land.sol\":\"Land\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Land.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\ncontract Land is ReentrancyGuard {\\r\\n    address GovernmentOfficial;\\r\\n    uint public governmentFeesRate = 4;\\r\\n    uint count = 0;\\r\\n\\r\\n    constructor() {\\r\\n        GovernmentOfficial = msg.sender;\\r\\n    }\\r\\n\\r\\n    enum OwnerApprovalStatus {\\r\\n        REQUESTED,\\r\\n        ACCEPTED,\\r\\n        REJECTED,\\r\\n        PAYMENT_DONE,\\r\\n        COMPLETED\\r\\n    }\\r\\n\\r\\n    enum GovernmentApprovalStatus {\\r\\n        PENDING,\\r\\n        ACCEPTED,\\r\\n        REJECTED\\r\\n    }\\r\\n\\r\\n    struct Landreg {\\r\\n        uint id;\\r\\n        //double area\\r\\n        uint area;\\r\\n        string landAddress;\\r\\n        uint landPrice;\\r\\n        string allLatitudeLongitude;\\r\\n        //string allLongitude;\\r\\n        uint propertyPID;\\r\\n        string physicalSurveyNumber;\\r\\n        string document;\\r\\n        //remove\\r\\n        bool isforSell;\\r\\n        address payable ownerAddress;\\r\\n        bool isLandVerified;\\r\\n    }\\r\\n\\r\\n    struct User {\\r\\n        address id;\\r\\n        string name;\\r\\n        uint age;\\r\\n        string city;\\r\\n        string aadharNumber;\\r\\n        string panNumber;\\r\\n        string document;\\r\\n        string email;\\r\\n        bool isUserVerified;\\r\\n        bool isExist;\\r\\n    }\\r\\n\\r\\n    // If the current owner approves then only the buyer can send money\\r\\n    struct LandRequest {\\r\\n        uint reqId;\\r\\n        address payable sellerId;\\r\\n        address payable buyerId;\\r\\n        uint landId;\\r\\n        OwnerApprovalStatus requestStatus;\\r\\n        bool isPaymentDone;\\r\\n        uint requestTimestamp;\\r\\n        GovernmentApprovalStatus govApprovalStatus;\\r\\n    }\\r\\n\\r\\n    // USER AND LAND MAPPING\\r\\n    uint public userCount;\\r\\n    uint public landsCount;\\r\\n    uint public documentId;\\r\\n    uint requestCount;\\r\\n\\r\\n    mapping(address => User) public UserMapping;\\r\\n\\r\\n    //REMOVE\\r\\n    mapping(uint => address) AllUsers;\\r\\n\\r\\n    //REMOVE\\r\\n    mapping(uint => address[]) allUsersList;\\r\\n\\r\\n    mapping(address => bool) RegisteredUserMapping;\\r\\n    mapping(address => uint[]) MyLands;\\r\\n\\r\\n    mapping(uint => Landreg) public lands;\\r\\n    mapping(uint => LandRequest) public LandRequestMapping;\\r\\n    mapping(address => uint[]) MyReceivedLandRequest;\\r\\n    mapping(address => uint[]) MySentLandRequest;\\r\\n\\r\\n    //remove\\r\\n    mapping(uint => uint[]) allLandList;\\r\\n\\r\\n    mapping(uint => uint[]) paymentDoneList;\\r\\n\\r\\n    //remove\\r\\n    function changeContractOwner(address _addr) public {\\r\\n        require(msg.sender == GovernmentOfficial, \\\"you are not contractOwner\\\");\\r\\n        GovernmentOfficial = _addr;\\r\\n    }\\r\\n\\r\\n    //-----------------------------------------------User-----------------------------------------------\\r\\n\\r\\n    function isUserRegistered(address _addr) external view returns (bool) {\\r\\n        if (RegisteredUserMapping[_addr]) {\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    event NewUserRegistered(\\r\\n        address indexed useraddress,\\r\\n        string _name,\\r\\n        uint _age,\\r\\n        string _city,\\r\\n        string _aadharNumber,\\r\\n        string indexed _panNumber,\\r\\n        string indexed _document,\\r\\n        string _email\\r\\n    );\\r\\n\\r\\n    modifier UserNotGovernmentOfficial(address sender) {\\r\\n        require(\\r\\n            sender != GovernmentOfficial,\\r\\n            \\\"Government official cannot register as User\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function registerUser(\\r\\n        string memory _name,\\r\\n        uint _age,\\r\\n        string memory _city,\\r\\n        string memory _aadharNumber,\\r\\n        string memory _panNumber,\\r\\n        string memory _document,\\r\\n        string memory _email\\r\\n    ) public UserNotGovernmentOfficial(msg.sender) {\\r\\n        require(!RegisteredUserMapping[msg.sender]);\\r\\n\\r\\n        RegisteredUserMapping[msg.sender] = true;\\r\\n        userCount++;\\r\\n        allUsersList[1].push(msg.sender);\\r\\n        AllUsers[userCount] = msg.sender;\\r\\n        UserMapping[msg.sender] = User(\\r\\n            msg.sender,\\r\\n            _name,\\r\\n            _age,\\r\\n            _city,\\r\\n            _aadharNumber,\\r\\n            _panNumber,\\r\\n            _document,\\r\\n            _email,\\r\\n            false,\\r\\n            true\\r\\n        );\\r\\n\\r\\n        emit NewUserRegistered(\\r\\n            msg.sender,\\r\\n            _name,\\r\\n            _age,\\r\\n            _city,\\r\\n            _aadharNumber,\\r\\n            _panNumber,\\r\\n            _document,\\r\\n            _email\\r\\n        );\\r\\n    }\\r\\n\\r\\n    error NotGovernmentOfficial(address msgSender);\\r\\n\\r\\n    modifier isGovernmentOfficial() {\\r\\n        if (msg.sender != GovernmentOfficial) {\\r\\n            revert NotGovernmentOfficial(msg.sender);\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function changeGovernmentFeesRate(uint rate) external isGovernmentOfficial {\\r\\n        governmentFeesRate = rate;\\r\\n    }\\r\\n\\r\\n    event UserVerified(address);\\r\\n\\r\\n    function verifyUser(address userWalletAddress) public isGovernmentOfficial {\\r\\n        UserMapping[userWalletAddress].isUserVerified = true;\\r\\n        emit UserVerified(userWalletAddress);\\r\\n    }\\r\\n\\r\\n    function isUserVerified(address id) public view returns (bool) {\\r\\n        return UserMapping[id].isUserVerified;\\r\\n    }\\r\\n\\r\\n    function ReturnAllUserList() public view returns (address[] memory) {\\r\\n        return allUsersList[1];\\r\\n    }\\r\\n\\r\\n    //-----------------------------------------------Land-----------------------------------------------\\r\\n    event NewLandAdded(\\r\\n        uint landID,\\r\\n        uint _area,\\r\\n        string _address,\\r\\n        uint landPrice,\\r\\n        string _allLatiLongi,\\r\\n        uint indexed _propertyPID,\\r\\n        string indexed _surveyNum\\r\\n    );\\r\\n\\r\\n    function addLand(\\r\\n        uint _area,\\r\\n        string memory _address,\\r\\n        uint landPrice,\\r\\n        string memory _allLatiLongi,\\r\\n        uint _propertyPID,\\r\\n        string memory _surveyNum,\\r\\n        string memory _document\\r\\n    ) public {\\r\\n        require(isUserVerified(msg.sender));\\r\\n        landsCount++;\\r\\n        lands[landsCount] = Landreg(\\r\\n            landsCount,\\r\\n            _area,\\r\\n            _address,\\r\\n            landPrice,\\r\\n            _allLatiLongi,\\r\\n            _propertyPID,\\r\\n            _surveyNum,\\r\\n            _document,\\r\\n            false,\\r\\n            payable(msg.sender),\\r\\n            false\\r\\n        );\\r\\n        MyLands[msg.sender].push(landsCount);\\r\\n\\r\\n        //  allLandList[1].push(landsCount);\\r\\n        emit NewLandAdded(\\r\\n            landsCount,\\r\\n            _area,\\r\\n            _address,\\r\\n            landPrice,\\r\\n            _allLatiLongi,\\r\\n            _propertyPID,\\r\\n            _surveyNum\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function ReturnAllLandList() public view returns (uint[] memory) {\\r\\n        return allLandList[1];\\r\\n    }\\r\\n\\r\\n    // modifier government official\\r\\n    function verifyLand(uint _id) public isGovernmentOfficial {\\r\\n        lands[_id].isLandVerified = true;\\r\\n    }\\r\\n\\r\\n    function isLandVerified(uint id) public view returns (bool) {\\r\\n        return lands[id].isLandVerified;\\r\\n    }\\r\\n\\r\\n    function myAllLands(address id) public view returns (uint[] memory) {\\r\\n        return MyLands[id];\\r\\n    }\\r\\n\\r\\n    /*     \\r\\n        function makeItforSell(uint id) public {\\r\\n        require(lands[id].ownerAddress == msg.sender);\\r\\n        lands[id].isforSell = true;0000\\r\\n    } \\r\\n    */\\r\\n\\r\\n    event LandIsRequestedToBuy(uint requestID, uint landID);\\r\\n\\r\\n    function requestforBuy(uint _landId)\\r\\n        public\\r\\n        UserNotGovernmentOfficial(msg.sender)\\r\\n        returns (uint)\\r\\n    {\\r\\n        require(\\r\\n            isUserVerified(msg.sender) && isLandVerified(_landId),\\r\\n            \\\"User and Land both MUST be verified\\\"\\r\\n        );\\r\\n        require(\\r\\n            msg.sender != lands[_landId].ownerAddress,\\r\\n            \\\"Owner cannot request for buying land\\\"\\r\\n        );\\r\\n\\r\\n        requestCount++;\\r\\n        LandRequestMapping[requestCount] = LandRequest(\\r\\n            requestCount,\\r\\n            lands[_landId].ownerAddress,\\r\\n            payable(msg.sender),\\r\\n            _landId,\\r\\n            OwnerApprovalStatus.REQUESTED,\\r\\n            false,\\r\\n            block.timestamp,\\r\\n            GovernmentApprovalStatus.PENDING\\r\\n        );\\r\\n        MyReceivedLandRequest[lands[_landId].ownerAddress].push(requestCount);\\r\\n        MySentLandRequest[msg.sender].push(requestCount);\\r\\n\\r\\n        emit LandIsRequestedToBuy(requestCount, _landId);\\r\\n        return requestCount;\\r\\n    }\\r\\n\\r\\n    function myReceivedLandRequests() public view returns (uint[] memory) {\\r\\n        return MyReceivedLandRequest[msg.sender];\\r\\n    }\\r\\n\\r\\n    function mySentLandRequests() public view returns (uint[] memory) {\\r\\n        return MySentLandRequest[msg.sender];\\r\\n    }\\r\\n\\r\\n    function acceptRequest(uint _requestId) public {\\r\\n        require(LandRequestMapping[_requestId].sellerId == msg.sender);\\r\\n        LandRequestMapping[_requestId].requestStatus = OwnerApprovalStatus\\r\\n            .ACCEPTED;\\r\\n    }\\r\\n\\r\\n    function rejectRequest(uint _requestId) public {\\r\\n        require(LandRequestMapping[_requestId].sellerId == msg.sender);\\r\\n        LandRequestMapping[_requestId].requestStatus = OwnerApprovalStatus\\r\\n            .REJECTED;\\r\\n    }\\r\\n\\r\\n    function isUserRequestFulfilled(uint id) public view returns (bool) {\\r\\n        return LandRequestMapping[id].isPaymentDone;\\r\\n    }\\r\\n\\r\\n    function landPrices(uint id) public view returns (uint) {\\r\\n        return lands[id].landPrice;\\r\\n    }\\r\\n\\r\\n    modifier GovernmentApprovalCheck(uint _requestId) {\\r\\n        require(\\r\\n            LandRequestMapping[_requestId].requestStatus ==\\r\\n                OwnerApprovalStatus.ACCEPTED,\\r\\n            \\\"Owner MUST approve to sell asset\\\"\\r\\n        );\\r\\n        require(\\r\\n            LandRequestMapping[_requestId].govApprovalStatus ==\\r\\n                GovernmentApprovalStatus.ACCEPTED,\\r\\n            \\\"Government MUST approve the Transaction\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function changeGovernmentStatus(uint _requestID, uint status)\\r\\n        public\\r\\n        isGovernmentOfficial\\r\\n    {\\r\\n        GovernmentApprovalStatus g = GovernmentApprovalStatus.PENDING;\\r\\n\\r\\n        if (status == 0) {\\r\\n            g = GovernmentApprovalStatus.PENDING;\\r\\n        } else if (status == 1) {\\r\\n            g = GovernmentApprovalStatus.ACCEPTED;\\r\\n        } else if (status == 2) {\\r\\n            g = GovernmentApprovalStatus.REJECTED;\\r\\n        }\\r\\n\\r\\n        LandRequestMapping[_requestID].govApprovalStatus = g;\\r\\n    }\\r\\n\\r\\n    error PaymentAlreadyCompleted();\\r\\n    error TransactionFailed();\\r\\n\\r\\n    function makePayment(uint _requestId)\\r\\n        public\\r\\n        payable\\r\\n        GovernmentApprovalCheck(_requestId)\\r\\n    {\\r\\n        require(\\r\\n            LandRequestMapping[_requestId].buyerId == msg.sender &&\\r\\n                LandRequestMapping[_requestId].requestStatus ==\\r\\n                OwnerApprovalStatus.ACCEPTED\\r\\n        );\\r\\n        if (LandRequestMapping[_requestId].isPaymentDone != false)\\r\\n            revert PaymentAlreadyCompleted();\\r\\n\\r\\n        LandRequestMapping[_requestId].requestStatus = OwnerApprovalStatus\\r\\n            .PAYMENT_DONE;\\r\\n        require(\\r\\n            msg.value >= lands[LandRequestMapping[_requestId].landId].landPrice,\\r\\n            \\\"Transacted amount is lesser than current Land price\\\"\\r\\n        );\\r\\n\\r\\n        uint transferAmount = msg.value;\\r\\n        uint governmentFeesAmount;\\r\\n        governmentFeesAmount = (governmentFeesRate * transferAmount) / 100;\\r\\n        transferAmount -= governmentFeesAmount;\\r\\n\\r\\n        (bool govTxStatus, ) = payable(GovernmentOfficial).call{\\r\\n            value: governmentFeesAmount\\r\\n        }(\\\"\\\");\\r\\n        if (!govTxStatus) revert TransactionFailed();\\r\\n\\r\\n        address currentAssetOwner = lands[LandRequestMapping[_requestId].landId]\\r\\n            .ownerAddress;\\r\\n        (bool Tx, ) = payable(currentAssetOwner).call{value: transferAmount}(\\r\\n            \\\"\\\"\\r\\n        );\\r\\n        if (!Tx) revert TransactionFailed();\\r\\n\\r\\n        LandRequestMapping[_requestId].isPaymentDone = true;\\r\\n        paymentDoneList[1].push(_requestId);\\r\\n\\r\\n        transferOwnership(_requestId);\\r\\n    }\\r\\n\\r\\n    function returnPaymentDoneList() public view returns (uint[] memory) {\\r\\n        return paymentDoneList[1];\\r\\n    }\\r\\n\\r\\n    function transferOwnership(uint _requestId) internal returns (bool) {\\r\\n        if (LandRequestMapping[_requestId].isPaymentDone == false) return false;\\r\\n        // documentId++;\\r\\n        LandRequestMapping[_requestId].requestStatus = OwnerApprovalStatus\\r\\n            .COMPLETED;\\r\\n        MyLands[LandRequestMapping[_requestId].buyerId].push(\\r\\n            LandRequestMapping[_requestId].landId\\r\\n        );\\r\\n\\r\\n        uint len = MyLands[LandRequestMapping[_requestId].sellerId].length;\\r\\n        for (uint i = 0; i < len; i++) {\\r\\n            if (\\r\\n                MyLands[LandRequestMapping[_requestId].sellerId][i] ==\\r\\n                LandRequestMapping[_requestId].landId\\r\\n            ) {\\r\\n                MyLands[LandRequestMapping[_requestId].sellerId][i] = MyLands[\\r\\n                    LandRequestMapping[_requestId].sellerId\\r\\n                ][len - 1];\\r\\n                MyLands[LandRequestMapping[_requestId].sellerId].pop();\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // lands[LandRequestMapping[_requestId].landId].document = documentUrl;\\r\\n        lands[LandRequestMapping[_requestId].landId].isforSell = false;\\r\\n        lands[LandRequestMapping[_requestId].landId]\\r\\n            .ownerAddress = LandRequestMapping[_requestId].buyerId;\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function getUserByAddress(address userAddress)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address,\\r\\n            string memory,\\r\\n            uint,\\r\\n            string memory,\\r\\n            string memory,\\r\\n            string memory,\\r\\n            string memory,\\r\\n            string memory,\\r\\n            bool,\\r\\n            bool\\r\\n        )\\r\\n    {\\r\\n        User memory u = UserMapping[userAddress];\\r\\n        return (\\r\\n            u.id,\\r\\n            u.name,\\r\\n            u.age,\\r\\n            u.city,\\r\\n            u.aadharNumber,\\r\\n            u.panNumber,\\r\\n            u.document,\\r\\n            u.email,\\r\\n            u.isUserVerified,\\r\\n            u.isExist\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getGovFee() public view returns (uint) {\\r\\n        return governmentFeesRate;\\r\\n    }\\r\\n\\r\\n    function getCount() public view returns (uint) {\\r\\n        return count;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf95462c45b0157745c4e0920b741f8224ca3612ba57e16be2f5a02efdcd261fd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526004600255600060035534801561001a57600080fd5b50600160008190555033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506147e1806100736000396000f3fe6080604052600436106101e35760003560e01c806378f7c83f11610102578063ccfdc19b11610095578063e261f1e511610064578063e261f1e51461074e578063edfbe24714610795578063f1d1be2b146107be578063f9c43bdf146107e7576101e3565b8063ccfdc19b14610665578063d196ebf21461068e578063d3b368c0146106cb578063d61ff68c14610708576101e3565b8063a846fc8f116100d1578063a846fc8f1461058e578063a87d942c146105b9578063ace417e0146105e4578063b10a30ed14610621576101e3565b806378f7c83f146104d25780637bb2d6db146104fd5780638e06b08f1461053a5780639c32e3b414610563576101e3565b8063499701b21161017a5780635114cb52116101495780635114cb5214610408578063553a998d1461042457806369c212f61461044f5780636cbf6cf814610495576101e3565b8063499701b2146103605780634ba1f0981461038b5780634d813120146103b4578063505dc2a3146103dd576101e3565b806323393d77116101b657806323393d77146102b85780632d7788db146102e35780633bbc7fe51461030c5780633ead67b514610337576101e3565b806307973ccf146101e85780630cc60c7814610213578063163f7522146102505780631c9afd0f1461028d575b600080fd5b3480156101f457600080fd5b506101fd610810565b60405161020a91906135ba565b60405180910390f35b34801561021f57600080fd5b5061023a60048036038101906102359190613615565b610816565b604051610247919061365d565b60405180910390f35b34801561025c57600080fd5b50610277600480360381019061027291906136d6565b610843565b604051610284919061365d565b60405180910390f35b34801561029957600080fd5b506102a26108aa565b6040516102af91906135ba565b60405180910390f35b3480156102c457600080fd5b506102cd6108b0565b6040516102da91906137c1565b60405180910390f35b3480156102ef57600080fd5b5061030a60048036038101906103059190613615565b61091a565b005b34801561031857600080fd5b506103216109ca565b60405161032e91906135ba565b60405180910390f35b34801561034357600080fd5b5061035e600480360381019061035991906136d6565b6109d0565b005b34801561036c57600080fd5b50610375610aa4565b60405161038291906137c1565b60405180910390f35b34801561039757600080fd5b506103b260048036038101906103ad9190613615565b610b39565b005b3480156103c057600080fd5b506103db60048036038101906103d691906136d6565b610be9565b005b3480156103e957600080fd5b506103f2610d10565b6040516103ff91906135ba565b60405180910390f35b610422600480360381019061041d9190613615565b610d1a565b005b34801561043057600080fd5b50610439611266565b60405161044691906138a1565b60405180910390f35b34801561045b57600080fd5b50610476600480360381019061047191906136d6565b611306565b60405161048c9a9998979695949392919061396b565b60405180910390f35b3480156104a157600080fd5b506104bc60048036038101906104b79190613615565b6117be565b6040516104c9919061365d565b60405180910390f35b3480156104de57600080fd5b506104e76117eb565b6040516104f491906135ba565b60405180910390f35b34801561050957600080fd5b50610524600480360381019061051f9190613615565b6117f1565b60405161053191906135ba565b60405180910390f35b34801561054657600080fd5b50610561600480360381019061055c9190613615565b611811565b005b34801561056f57600080fd5b506105786118ad565b60405161058591906137c1565b60405180910390f35b34801561059a57600080fd5b506105a3611942565b6040516105b091906137c1565b60405180910390f35b3480156105c557600080fd5b506105ce6119ac565b6040516105db91906135ba565b60405180910390f35b3480156105f057600080fd5b5061060b600480360381019061060691906136d6565b6119b6565b604051610618919061365d565b60405180910390f35b34801561062d57600080fd5b5061064860048036038101906106439190613615565b611a0f565b60405161065c989796959493929190613b11565b60405180910390f35b34801561067157600080fd5b5061068c60048036038101906106879190613cc4565b611abe565b005b34801561069a57600080fd5b506106b560048036038101906106b091906136d6565b611d59565b6040516106c291906137c1565b60405180910390f35b3480156106d757600080fd5b506106f260048036038101906106ed9190613615565b611df0565b6040516106ff91906135ba565b60405180910390f35b34801561071457600080fd5b5061072f600480360381019061072a91906136d6565b6122f1565b6040516107459a9998979695949392919061396b565b60405180910390f35b34801561075a57600080fd5b5061077560048036038101906107709190613615565b6126af565b60405161078c9b9a99989796959493929190613dd6565b60405180910390f35b3480156107a157600080fd5b506107bc60048036038101906107b79190613e9d565b612963565b005b3480156107ca57600080fd5b506107e560048036038101906107e09190613fe7565b612df6565b005b3480156107f357600080fd5b5061080e60048036038101906108099190613615565b612f00565b005b60045481565b6000600e600083815260200190815260200160002060040160019054906101000a900460ff169050919050565b6000600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156108a057600190506108a5565b600090505b919050565b60055481565b6060601160006001815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561091057602002820191906000526020600020905b8154815260200190600101908083116108fc575b5050505050905090565b3373ffffffffffffffffffffffffffffffffffffffff16600e600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461098857600080fd5b6002600e600083815260200190815260200160002060040160006101000a81548160ff021916908360048111156109c2576109c1613a52565b5b021790555050565b60025481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5790614073565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6060600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610b2f57602002820191906000526020600020905b815481526020019060010190808311610b1b575b5050505050905090565b3373ffffffffffffffffffffffffffffffffffffffff16600e600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610ba757600080fd5b6001600e600083815260200190815260200160002060040160006101000a81548160ff02191690836004811115610be157610be0613a52565b5b021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c7b57336040517fda3840b6000000000000000000000000000000000000000000000000000000008152600401610c729190614093565b60405180910390fd5b6001600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060080160006101000a81548160ff0219169083151502179055507fa6625d2d26e786e2f473111bea4b2fcdbbf1863d883a2359989ce3a103d2972a81604051610d059190614093565b60405180910390a150565b6000600254905090565b8060016004811115610d2f57610d2e613a52565b5b600e600083815260200190815260200160002060040160009054906101000a900460ff166004811115610d6557610d64613a52565b5b14610da5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9c906140fa565b60405180910390fd5b60016002811115610db957610db8613a52565b5b600e600083815260200190815260200160002060060160009054906101000a900460ff166002811115610def57610dee613a52565b5b14610e2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e269061418c565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16600e600084815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148015610ee7575060016004811115610eaf57610eae613a52565b5b600e600084815260200190815260200160002060040160009054906101000a900460ff166004811115610ee557610ee4613a52565b5b145b610ef057600080fd5b60001515600e600084815260200190815260200160002060040160019054906101000a900460ff16151514610f51576040517f9a3e7d1c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6003600e600084815260200190815260200160002060040160006101000a81548160ff02191690836004811115610f8b57610f8a613a52565b5b0217905550600d6000600e600085815260200190815260200160002060030154815260200190815260200160002060030154341015610fff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ff69061421e565b60405180910390fd5b60003490506000606482600254611016919061426d565b61102091906142f6565b9050808261102e9190614327565b91506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16826040516110789061438c565b60006040518083038185875af1925050503d80600081146110b5576040519150601f19603f3d011682016040523d82523d6000602084013e6110ba565b606091505b50509050806110f5576040517fbf961a2800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600d6000600e600089815260200190815260200160002060030154815260200190815260200160002060080160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff168560405161116c9061438c565b60006040518083038185875af1925050503d80600081146111a9576040519150601f19603f3d011682016040523d82523d6000602084013e6111ae565b606091505b50509050806111e9576040517fbf961a2800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600e600089815260200190815260200160002060040160016101000a81548160ff021916908315150217905550601260006001815260200190815260200160002087908060018154018082558091505060019003906000526020600020016000909190919091505561125c87612fc4565b5050505050505050565b6060600a6000600181526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156112fc57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116112b2575b5050505050905090565b60006060600060608060608060606000806000600860008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806101400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820180546113ca906143d0565b80601f01602080910402602001604051908101604052809291908181526020018280546113f6906143d0565b80156114435780601f1061141857610100808354040283529160200191611443565b820191906000526020600020905b81548152906001019060200180831161142657829003601f168201915b5050505050815260200160028201548152602001600382018054611466906143d0565b80601f0160208091040260200160405190810160405280929190818152602001828054611492906143d0565b80156114df5780601f106114b4576101008083540402835291602001916114df565b820191906000526020600020905b8154815290600101906020018083116114c257829003601f168201915b505050505081526020016004820180546114f8906143d0565b80601f0160208091040260200160405190810160405280929190818152602001828054611524906143d0565b80156115715780601f1061154657610100808354040283529160200191611571565b820191906000526020600020905b81548152906001019060200180831161155457829003601f168201915b5050505050815260200160058201805461158a906143d0565b80601f01602080910402602001604051908101604052809291908181526020018280546115b6906143d0565b80156116035780601f106115d857610100808354040283529160200191611603565b820191906000526020600020905b8154815290600101906020018083116115e657829003601f168201915b5050505050815260200160068201805461161c906143d0565b80601f0160208091040260200160405190810160405280929190818152602001828054611648906143d0565b80156116955780601f1061166a57610100808354040283529160200191611695565b820191906000526020600020905b81548152906001019060200180831161167857829003601f168201915b505050505081526020016007820180546116ae906143d0565b80601f01602080910402602001604051908101604052809291908181526020018280546116da906143d0565b80156117275780601f106116fc57610100808354040283529160200191611727565b820191906000526020600020905b81548152906001019060200180831161170a57829003601f168201915b505050505081526020016008820160009054906101000a900460ff161515151581526020016008820160019054906101000a900460ff1615151515815250509050806000015181602001518260400151836060015184608001518560a001518660c001518760e001518861010001518961012001519a509a509a509a509a509a509a509a509a509a50509193959799509193959799565b6000600d600083815260200190815260200160002060080160159054906101000a900460ff169050919050565b60065481565b6000600d6000838152602001908152602001600020600301549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146118a357336040517fda3840b600000000000000000000000000000000000000000000000000000000815260040161189a9190614093565b60405180910390fd5b8060028190555050565b6060601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561193857602002820191906000526020600020905b815481526020019060010190808311611924575b5050505050905090565b606060126000600181526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156119a257602002820191906000526020600020905b81548152602001906001019080831161198e575b5050505050905090565b6000600354905090565b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060080160009054906101000a900460ff169050919050565b600e6020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154908060040160009054906101000a900460ff16908060040160019054906101000a900460ff16908060050154908060060160009054906101000a900460ff16905088565b611ac7336119b6565b611ad057600080fd5b60056000815480929190611ae390614402565b919050555060405180610160016040528060055481526020018881526020018781526020018681526020018581526020018481526020018381526020018281526020016000151581526020013373ffffffffffffffffffffffffffffffffffffffff16815260200160001515815250600d6000600554815260200190815260200160002060008201518160000155602082015181600101556040820151816002019080519060200190611b979291906134fe565b50606082015181600301556080820151816004019080519060200190611bbe9291906134fe565b5060a0820151816005015560c0820151816006019080519060200190611be59291906134fe565b5060e0820151816007019080519060200190611c029291906134fe565b506101008201518160080160006101000a81548160ff0219169083151502179055506101208201518160080160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506101408201518160080160156101000a81548160ff021916908315150217905550905050600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600554908060018154018082558091505060019003906000526020600020016000909190919091505581604051611d069190614487565b6040518091039020837f25ff2b59e349aaa694ae2551d1f753e253e12d3821a2d2ce446fd75f464b23526005548a8a8a8a604051611d4895949392919061449e565b60405180910390a350505050505050565b6060600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015611de457602002820191906000526020600020905b815481526020019060010190808311611dd0575b50505050509050919050565b600033600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611e84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e7b90614571565b60405180910390fd5b611e8d336119b6565b8015611e9e5750611e9d836117be565b5b611edd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ed490614603565b60405180910390fd5b600d600084815260200190815260200160002060080160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415611f82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f7990614695565b60405180910390fd5b60076000815480929190611f9590614402565b91905055506040518061010001604052806007548152602001600d600086815260200190815260200160002060080160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018481526020016000600481111561203657612035613a52565b5b81526020016000151581526020014281526020016000600281111561205e5761205d613a52565b5b815250600e600060075481526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003015560808201518160040160006101000a81548160ff0219169083600481111561214357612142613a52565b5b021790555060a08201518160040160016101000a81548160ff02191690831515021790555060c0820151816005015560e08201518160060160006101000a81548160ff0219169083600281111561219d5761219c613a52565b5b0217905550905050600f6000600d600086815260200190815260200160002060080160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206007549080600181540180825580915050600190039060005260206000200160009091909190915055601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060075490806001815401808255809150506001900390600052602060002001600090919091909150557f034282114a310ea163ae0f80246510709b65fd1a25db69875e1b9bc6a96d2404600754846040516122de9291906146b5565b60405180910390a1600754915050919050565b60086020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600101805461233a906143d0565b80601f0160208091040260200160405190810160405280929190818152602001828054612366906143d0565b80156123b35780601f10612388576101008083540402835291602001916123b3565b820191906000526020600020905b81548152906001019060200180831161239657829003601f168201915b5050505050908060020154908060030180546123ce906143d0565b80601f01602080910402602001604051908101604052809291908181526020018280546123fa906143d0565b80156124475780601f1061241c57610100808354040283529160200191612447565b820191906000526020600020905b81548152906001019060200180831161242a57829003601f168201915b50505050509080600401805461245c906143d0565b80601f0160208091040260200160405190810160405280929190818152602001828054612488906143d0565b80156124d55780601f106124aa576101008083540402835291602001916124d5565b820191906000526020600020905b8154815290600101906020018083116124b857829003601f168201915b5050505050908060050180546124ea906143d0565b80601f0160208091040260200160405190810160405280929190818152602001828054612516906143d0565b80156125635780601f1061253857610100808354040283529160200191612563565b820191906000526020600020905b81548152906001019060200180831161254657829003601f168201915b505050505090806006018054612578906143d0565b80601f01602080910402602001604051908101604052809291908181526020018280546125a4906143d0565b80156125f15780601f106125c6576101008083540402835291602001916125f1565b820191906000526020600020905b8154815290600101906020018083116125d457829003601f168201915b505050505090806007018054612606906143d0565b80601f0160208091040260200160405190810160405280929190818152602001828054612632906143d0565b801561267f5780601f106126545761010080835404028352916020019161267f565b820191906000526020600020905b81548152906001019060200180831161266257829003601f168201915b5050505050908060080160009054906101000a900460ff16908060080160019054906101000a900460ff1690508a565b600d6020528060005260406000206000915090508060000154908060010154908060020180546126de906143d0565b80601f016020809104026020016040519081016040528092919081815260200182805461270a906143d0565b80156127575780601f1061272c57610100808354040283529160200191612757565b820191906000526020600020905b81548152906001019060200180831161273a57829003601f168201915b505050505090806003015490806004018054612772906143d0565b80601f016020809104026020016040519081016040528092919081815260200182805461279e906143d0565b80156127eb5780601f106127c0576101008083540402835291602001916127eb565b820191906000526020600020905b8154815290600101906020018083116127ce57829003601f168201915b505050505090806005015490806006018054612806906143d0565b80601f0160208091040260200160405190810160405280929190818152602001828054612832906143d0565b801561287f5780601f106128545761010080835404028352916020019161287f565b820191906000526020600020905b81548152906001019060200180831161286257829003601f168201915b505050505090806007018054612894906143d0565b80601f01602080910402602001604051908101604052809291908181526020018280546128c0906143d0565b801561290d5780601f106128e25761010080835404028352916020019161290d565b820191906000526020600020905b8154815290600101906020018083116128f057829003601f168201915b5050505050908060080160009054906101000a900460ff16908060080160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060080160159054906101000a900460ff1690508b565b33600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156129f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129ec90614571565b60405180910390fd5b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615612a4c57600080fd5b6001600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060046000815480929190612ab790614402565b9190505550600a600060018152602001908152602001600020339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503360096000600454815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040518061014001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200189815260200188815260200187815260200186815260200185815260200184815260200183815260200160001515815260200160011515815250600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019080519060200190612c899291906134fe565b50604082015181600201556060820151816003019080519060200190612cb09291906134fe565b506080820151816004019080519060200190612ccd9291906134fe565b5060a0820151816005019080519060200190612cea9291906134fe565b5060c0820151816006019080519060200190612d079291906134fe565b5060e0820151816007019080519060200190612d249291906134fe565b506101008201518160080160006101000a81548160ff0219169083151502179055506101208201518160080160016101000a81548160ff02191690831515021790555090505082604051612d789190614487565b604051809103902084604051612d8e9190614487565b60405180910390203373ffffffffffffffffffffffffffffffffffffffff167f07ade3a6b537840d0ba5e5a01af123418d19d953f218ee7d476a7091c7f124688b8b8b8b89604051612de49594939291906146de565b60405180910390a45050505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612e8857336040517fda3840b6000000000000000000000000000000000000000000000000000000008152600401612e7f9190614093565b60405180910390fd5b600080821415612e9b5760009050612ebd565b6001821415612ead5760019050612ebc565b6002821415612ebb57600290505b5b5b80600e600085815260200190815260200160002060060160006101000a81548160ff02191690836002811115612ef657612ef5613a52565b5b0217905550505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612f9257336040517fda3840b6000000000000000000000000000000000000000000000000000000008152600401612f899190614093565b60405180910390fd5b6001600d600083815260200190815260200160002060080160156101000a81548160ff02191690831515021790555050565b6000801515600e600084815260200190815260200160002060040160019054906101000a900460ff1615151415612ffe57600090506134f9565b6004600e600084815260200190815260200160002060040160006101000a81548160ff0219169083600481111561303857613037613a52565b5b0217905550600c6000600e600085815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600e60008481526020019081526020016000206003015490806001815401808255809150506001900390600052602060002001600090919091909150556000600c6000600e600086815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050905060005b8181101561340c57600e600085815260200190815260200160002060030154600c6000600e600088815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481106132155761321461474d565b5b906000526020600020015414156133f957600c6000600e600087815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001836132a89190614327565b815481106132b9576132b861474d565b5b9060005260206000200154600c6000600e600088815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811061334b5761334a61474d565b5b9060005260206000200181905550600c6000600e600087815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806133de576133dd61477c565b5b6001900381819060005260206000200160009055905561340c565b808061340490614402565b91505061316f565b506000600d6000600e600087815260200190815260200160002060030154815260200190815260200160002060080160006101000a81548160ff021916908315150217905550600e600084815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600d6000600e600087815260200190815260200160002060030154815260200190815260200160002060080160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019150505b919050565b82805461350a906143d0565b90600052602060002090601f01602090048101928261352c5760008555613573565b82601f1061354557805160ff1916838001178555613573565b82800160010185558215613573579182015b82811115613572578251825591602001919060010190613557565b5b5090506135809190613584565b5090565b5b8082111561359d576000816000905550600101613585565b5090565b6000819050919050565b6135b4816135a1565b82525050565b60006020820190506135cf60008301846135ab565b92915050565b6000604051905090565b600080fd5b600080fd5b6135f2816135a1565b81146135fd57600080fd5b50565b60008135905061360f816135e9565b92915050565b60006020828403121561362b5761362a6135df565b5b600061363984828501613600565b91505092915050565b60008115159050919050565b61365781613642565b82525050565b6000602082019050613672600083018461364e565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006136a382613678565b9050919050565b6136b381613698565b81146136be57600080fd5b50565b6000813590506136d0816136aa565b92915050565b6000602082840312156136ec576136eb6135df565b5b60006136fa848285016136c1565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613738816135a1565b82525050565b600061374a838361372f565b60208301905092915050565b6000602082019050919050565b600061376e82613703565b613778818561370e565b93506137838361371f565b8060005b838110156137b457815161379b888261373e565b97506137a683613756565b925050600181019050613787565b5085935050505092915050565b600060208201905081810360008301526137db8184613763565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61381881613698565b82525050565b600061382a838361380f565b60208301905092915050565b6000602082019050919050565b600061384e826137e3565b61385881856137ee565b9350613863836137ff565b8060005b8381101561389457815161387b888261381e565b975061388683613836565b925050600181019050613867565b5085935050505092915050565b600060208201905081810360008301526138bb8184613843565b905092915050565b6138cc81613698565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561390c5780820151818401526020810190506138f1565b8381111561391b576000848401525b50505050565b6000601f19601f8301169050919050565b600061393d826138d2565b61394781856138dd565b93506139578185602086016138ee565b61396081613921565b840191505092915050565b600061014082019050613981600083018d6138c3565b8181036020830152613993818c613932565b90506139a2604083018b6135ab565b81810360608301526139b4818a613932565b905081810360808301526139c88189613932565b905081810360a08301526139dc8188613932565b905081810360c08301526139f08187613932565b905081810360e0830152613a048186613932565b9050613a1461010083018561364e565b613a2261012083018461364e565b9b9a5050505050505050505050565b6000613a3c82613678565b9050919050565b613a4c81613a31565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60058110613a9257613a91613a52565b5b50565b6000819050613aa382613a81565b919050565b6000613ab382613a95565b9050919050565b613ac381613aa8565b82525050565b60038110613ada57613ad9613a52565b5b50565b6000819050613aeb82613ac9565b919050565b6000613afb82613add565b9050919050565b613b0b81613af0565b82525050565b600061010082019050613b27600083018b6135ab565b613b34602083018a613a43565b613b416040830189613a43565b613b4e60608301886135ab565b613b5b6080830187613aba565b613b6860a083018661364e565b613b7560c08301856135ab565b613b8260e0830184613b02565b9998505050505050505050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613bd182613921565b810181811067ffffffffffffffff82111715613bf057613bef613b99565b5b80604052505050565b6000613c036135d5565b9050613c0f8282613bc8565b919050565b600067ffffffffffffffff821115613c2f57613c2e613b99565b5b613c3882613921565b9050602081019050919050565b82818337600083830152505050565b6000613c67613c6284613c14565b613bf9565b905082815260208101848484011115613c8357613c82613b94565b5b613c8e848285613c45565b509392505050565b600082601f830112613cab57613caa613b8f565b5b8135613cbb848260208601613c54565b91505092915050565b600080600080600080600060e0888a031215613ce357613ce26135df565b5b6000613cf18a828b01613600565b975050602088013567ffffffffffffffff811115613d1257613d116135e4565b5b613d1e8a828b01613c96565b9650506040613d2f8a828b01613600565b955050606088013567ffffffffffffffff811115613d5057613d4f6135e4565b5b613d5c8a828b01613c96565b9450506080613d6d8a828b01613600565b93505060a088013567ffffffffffffffff811115613d8e57613d8d6135e4565b5b613d9a8a828b01613c96565b92505060c088013567ffffffffffffffff811115613dbb57613dba6135e4565b5b613dc78a828b01613c96565b91505092959891949750929550565b600061016082019050613dec600083018e6135ab565b613df9602083018d6135ab565b8181036040830152613e0b818c613932565b9050613e1a606083018b6135ab565b8181036080830152613e2c818a613932565b9050613e3b60a08301896135ab565b81810360c0830152613e4d8188613932565b905081810360e0830152613e618187613932565b9050613e7161010083018661364e565b613e7f610120830185613a43565b613e8d61014083018461364e565b9c9b505050505050505050505050565b600080600080600080600060e0888a031215613ebc57613ebb6135df565b5b600088013567ffffffffffffffff811115613eda57613ed96135e4565b5b613ee68a828b01613c96565b9750506020613ef78a828b01613600565b965050604088013567ffffffffffffffff811115613f1857613f176135e4565b5b613f248a828b01613c96565b955050606088013567ffffffffffffffff811115613f4557613f446135e4565b5b613f518a828b01613c96565b945050608088013567ffffffffffffffff811115613f7257613f716135e4565b5b613f7e8a828b01613c96565b93505060a088013567ffffffffffffffff811115613f9f57613f9e6135e4565b5b613fab8a828b01613c96565b92505060c088013567ffffffffffffffff811115613fcc57613fcb6135e4565b5b613fd88a828b01613c96565b91505092959891949750929550565b60008060408385031215613ffe57613ffd6135df565b5b600061400c85828601613600565b925050602061401d85828601613600565b9150509250929050565b7f796f7520617265206e6f7420636f6e74726163744f776e657200000000000000600082015250565b600061405d6019836138dd565b915061406882614027565b602082019050919050565b6000602082019050818103600083015261408c81614050565b9050919050565b60006020820190506140a860008301846138c3565b92915050565b7f4f776e6572204d55535420617070726f766520746f2073656c6c206173736574600082015250565b60006140e46020836138dd565b91506140ef826140ae565b602082019050919050565b60006020820190508181036000830152614113816140d7565b9050919050565b7f476f7665726e6d656e74204d55535420617070726f766520746865205472616e60008201527f73616374696f6e00000000000000000000000000000000000000000000000000602082015250565b60006141766027836138dd565b91506141818261411a565b604082019050919050565b600060208201905081810360008301526141a581614169565b9050919050565b7f5472616e73616374656420616d6f756e74206973206c6573736572207468616e60008201527f2063757272656e74204c616e6420707269636500000000000000000000000000602082015250565b60006142086033836138dd565b9150614213826141ac565b604082019050919050565b60006020820190508181036000830152614237816141fb565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614278826135a1565b9150614283836135a1565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156142bc576142bb61423e565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000614301826135a1565b915061430c836135a1565b92508261431c5761431b6142c7565b5b828204905092915050565b6000614332826135a1565b915061433d836135a1565b9250828210156143505761434f61423e565b5b828203905092915050565b600081905092915050565b50565b600061437660008361435b565b915061438182614366565b600082019050919050565b600061439782614369565b9150819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806143e857607f821691505b602082108114156143fc576143fb6143a1565b5b50919050565b600061440d826135a1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156144405761443f61423e565b5b600182019050919050565b600081905092915050565b6000614461826138d2565b61446b818561444b565b935061447b8185602086016138ee565b80840191505092915050565b60006144938284614456565b915081905092915050565b600060a0820190506144b360008301886135ab565b6144c060208301876135ab565b81810360408301526144d28186613932565b90506144e160608301856135ab565b81810360808301526144f38184613932565b90509695505050505050565b7f476f7665726e6d656e74206f6666696369616c2063616e6e6f7420726567697360008201527f7465722061732055736572000000000000000000000000000000000000000000602082015250565b600061455b602b836138dd565b9150614566826144ff565b604082019050919050565b6000602082019050818103600083015261458a8161454e565b9050919050565b7f5573657220616e64204c616e6420626f7468204d55535420626520766572696660008201527f6965640000000000000000000000000000000000000000000000000000000000602082015250565b60006145ed6023836138dd565b91506145f882614591565b604082019050919050565b6000602082019050818103600083015261461c816145e0565b9050919050565b7f4f776e65722063616e6e6f74207265717565737420666f7220627579696e672060008201527f6c616e6400000000000000000000000000000000000000000000000000000000602082015250565b600061467f6024836138dd565b915061468a82614623565b604082019050919050565b600060208201905081810360008301526146ae81614672565b9050919050565b60006040820190506146ca60008301856135ab565b6146d760208301846135ab565b9392505050565b600060a08201905081810360008301526146f88188613932565b905061470760208301876135ab565b81810360408301526147198186613932565b9050818103606083015261472d8185613932565b905081810360808301526147418184613932565b90509695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220f5301c2f719c777bf3aaa6266ea37bb8597caa2c38215e757d4b21b7365ac8ee64736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106101e35760003560e01c806378f7c83f11610102578063ccfdc19b11610095578063e261f1e511610064578063e261f1e51461074e578063edfbe24714610795578063f1d1be2b146107be578063f9c43bdf146107e7576101e3565b8063ccfdc19b14610665578063d196ebf21461068e578063d3b368c0146106cb578063d61ff68c14610708576101e3565b8063a846fc8f116100d1578063a846fc8f1461058e578063a87d942c146105b9578063ace417e0146105e4578063b10a30ed14610621576101e3565b806378f7c83f146104d25780637bb2d6db146104fd5780638e06b08f1461053a5780639c32e3b414610563576101e3565b8063499701b21161017a5780635114cb52116101495780635114cb5214610408578063553a998d1461042457806369c212f61461044f5780636cbf6cf814610495576101e3565b8063499701b2146103605780634ba1f0981461038b5780634d813120146103b4578063505dc2a3146103dd576101e3565b806323393d77116101b657806323393d77146102b85780632d7788db146102e35780633bbc7fe51461030c5780633ead67b514610337576101e3565b806307973ccf146101e85780630cc60c7814610213578063163f7522146102505780631c9afd0f1461028d575b600080fd5b3480156101f457600080fd5b506101fd610810565b60405161020a91906135ba565b60405180910390f35b34801561021f57600080fd5b5061023a60048036038101906102359190613615565b610816565b604051610247919061365d565b60405180910390f35b34801561025c57600080fd5b50610277600480360381019061027291906136d6565b610843565b604051610284919061365d565b60405180910390f35b34801561029957600080fd5b506102a26108aa565b6040516102af91906135ba565b60405180910390f35b3480156102c457600080fd5b506102cd6108b0565b6040516102da91906137c1565b60405180910390f35b3480156102ef57600080fd5b5061030a60048036038101906103059190613615565b61091a565b005b34801561031857600080fd5b506103216109ca565b60405161032e91906135ba565b60405180910390f35b34801561034357600080fd5b5061035e600480360381019061035991906136d6565b6109d0565b005b34801561036c57600080fd5b50610375610aa4565b60405161038291906137c1565b60405180910390f35b34801561039757600080fd5b506103b260048036038101906103ad9190613615565b610b39565b005b3480156103c057600080fd5b506103db60048036038101906103d691906136d6565b610be9565b005b3480156103e957600080fd5b506103f2610d10565b6040516103ff91906135ba565b60405180910390f35b610422600480360381019061041d9190613615565b610d1a565b005b34801561043057600080fd5b50610439611266565b60405161044691906138a1565b60405180910390f35b34801561045b57600080fd5b50610476600480360381019061047191906136d6565b611306565b60405161048c9a9998979695949392919061396b565b60405180910390f35b3480156104a157600080fd5b506104bc60048036038101906104b79190613615565b6117be565b6040516104c9919061365d565b60405180910390f35b3480156104de57600080fd5b506104e76117eb565b6040516104f491906135ba565b60405180910390f35b34801561050957600080fd5b50610524600480360381019061051f9190613615565b6117f1565b60405161053191906135ba565b60405180910390f35b34801561054657600080fd5b50610561600480360381019061055c9190613615565b611811565b005b34801561056f57600080fd5b506105786118ad565b60405161058591906137c1565b60405180910390f35b34801561059a57600080fd5b506105a3611942565b6040516105b091906137c1565b60405180910390f35b3480156105c557600080fd5b506105ce6119ac565b6040516105db91906135ba565b60405180910390f35b3480156105f057600080fd5b5061060b600480360381019061060691906136d6565b6119b6565b604051610618919061365d565b60405180910390f35b34801561062d57600080fd5b5061064860048036038101906106439190613615565b611a0f565b60405161065c989796959493929190613b11565b60405180910390f35b34801561067157600080fd5b5061068c60048036038101906106879190613cc4565b611abe565b005b34801561069a57600080fd5b506106b560048036038101906106b091906136d6565b611d59565b6040516106c291906137c1565b60405180910390f35b3480156106d757600080fd5b506106f260048036038101906106ed9190613615565b611df0565b6040516106ff91906135ba565b60405180910390f35b34801561071457600080fd5b5061072f600480360381019061072a91906136d6565b6122f1565b6040516107459a9998979695949392919061396b565b60405180910390f35b34801561075a57600080fd5b5061077560048036038101906107709190613615565b6126af565b60405161078c9b9a99989796959493929190613dd6565b60405180910390f35b3480156107a157600080fd5b506107bc60048036038101906107b79190613e9d565b612963565b005b3480156107ca57600080fd5b506107e560048036038101906107e09190613fe7565b612df6565b005b3480156107f357600080fd5b5061080e60048036038101906108099190613615565b612f00565b005b60045481565b6000600e600083815260200190815260200160002060040160019054906101000a900460ff169050919050565b6000600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156108a057600190506108a5565b600090505b919050565b60055481565b6060601160006001815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561091057602002820191906000526020600020905b8154815260200190600101908083116108fc575b5050505050905090565b3373ffffffffffffffffffffffffffffffffffffffff16600e600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461098857600080fd5b6002600e600083815260200190815260200160002060040160006101000a81548160ff021916908360048111156109c2576109c1613a52565b5b021790555050565b60025481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5790614073565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6060600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610b2f57602002820191906000526020600020905b815481526020019060010190808311610b1b575b5050505050905090565b3373ffffffffffffffffffffffffffffffffffffffff16600e600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610ba757600080fd5b6001600e600083815260200190815260200160002060040160006101000a81548160ff02191690836004811115610be157610be0613a52565b5b021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c7b57336040517fda3840b6000000000000000000000000000000000000000000000000000000008152600401610c729190614093565b60405180910390fd5b6001600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060080160006101000a81548160ff0219169083151502179055507fa6625d2d26e786e2f473111bea4b2fcdbbf1863d883a2359989ce3a103d2972a81604051610d059190614093565b60405180910390a150565b6000600254905090565b8060016004811115610d2f57610d2e613a52565b5b600e600083815260200190815260200160002060040160009054906101000a900460ff166004811115610d6557610d64613a52565b5b14610da5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9c906140fa565b60405180910390fd5b60016002811115610db957610db8613a52565b5b600e600083815260200190815260200160002060060160009054906101000a900460ff166002811115610def57610dee613a52565b5b14610e2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e269061418c565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16600e600084815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148015610ee7575060016004811115610eaf57610eae613a52565b5b600e600084815260200190815260200160002060040160009054906101000a900460ff166004811115610ee557610ee4613a52565b5b145b610ef057600080fd5b60001515600e600084815260200190815260200160002060040160019054906101000a900460ff16151514610f51576040517f9a3e7d1c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6003600e600084815260200190815260200160002060040160006101000a81548160ff02191690836004811115610f8b57610f8a613a52565b5b0217905550600d6000600e600085815260200190815260200160002060030154815260200190815260200160002060030154341015610fff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ff69061421e565b60405180910390fd5b60003490506000606482600254611016919061426d565b61102091906142f6565b9050808261102e9190614327565b91506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16826040516110789061438c565b60006040518083038185875af1925050503d80600081146110b5576040519150601f19603f3d011682016040523d82523d6000602084013e6110ba565b606091505b50509050806110f5576040517fbf961a2800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600d6000600e600089815260200190815260200160002060030154815260200190815260200160002060080160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff168560405161116c9061438c565b60006040518083038185875af1925050503d80600081146111a9576040519150601f19603f3d011682016040523d82523d6000602084013e6111ae565b606091505b50509050806111e9576040517fbf961a2800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600e600089815260200190815260200160002060040160016101000a81548160ff021916908315150217905550601260006001815260200190815260200160002087908060018154018082558091505060019003906000526020600020016000909190919091505561125c87612fc4565b5050505050505050565b6060600a6000600181526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156112fc57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116112b2575b5050505050905090565b60006060600060608060608060606000806000600860008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806101400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820180546113ca906143d0565b80601f01602080910402602001604051908101604052809291908181526020018280546113f6906143d0565b80156114435780601f1061141857610100808354040283529160200191611443565b820191906000526020600020905b81548152906001019060200180831161142657829003601f168201915b5050505050815260200160028201548152602001600382018054611466906143d0565b80601f0160208091040260200160405190810160405280929190818152602001828054611492906143d0565b80156114df5780601f106114b4576101008083540402835291602001916114df565b820191906000526020600020905b8154815290600101906020018083116114c257829003601f168201915b505050505081526020016004820180546114f8906143d0565b80601f0160208091040260200160405190810160405280929190818152602001828054611524906143d0565b80156115715780601f1061154657610100808354040283529160200191611571565b820191906000526020600020905b81548152906001019060200180831161155457829003601f168201915b5050505050815260200160058201805461158a906143d0565b80601f01602080910402602001604051908101604052809291908181526020018280546115b6906143d0565b80156116035780601f106115d857610100808354040283529160200191611603565b820191906000526020600020905b8154815290600101906020018083116115e657829003601f168201915b5050505050815260200160068201805461161c906143d0565b80601f0160208091040260200160405190810160405280929190818152602001828054611648906143d0565b80156116955780601f1061166a57610100808354040283529160200191611695565b820191906000526020600020905b81548152906001019060200180831161167857829003601f168201915b505050505081526020016007820180546116ae906143d0565b80601f01602080910402602001604051908101604052809291908181526020018280546116da906143d0565b80156117275780601f106116fc57610100808354040283529160200191611727565b820191906000526020600020905b81548152906001019060200180831161170a57829003601f168201915b505050505081526020016008820160009054906101000a900460ff161515151581526020016008820160019054906101000a900460ff1615151515815250509050806000015181602001518260400151836060015184608001518560a001518660c001518760e001518861010001518961012001519a509a509a509a509a509a509a509a509a509a50509193959799509193959799565b6000600d600083815260200190815260200160002060080160159054906101000a900460ff169050919050565b60065481565b6000600d6000838152602001908152602001600020600301549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146118a357336040517fda3840b600000000000000000000000000000000000000000000000000000000815260040161189a9190614093565b60405180910390fd5b8060028190555050565b6060601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561193857602002820191906000526020600020905b815481526020019060010190808311611924575b5050505050905090565b606060126000600181526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156119a257602002820191906000526020600020905b81548152602001906001019080831161198e575b5050505050905090565b6000600354905090565b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060080160009054906101000a900460ff169050919050565b600e6020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154908060040160009054906101000a900460ff16908060040160019054906101000a900460ff16908060050154908060060160009054906101000a900460ff16905088565b611ac7336119b6565b611ad057600080fd5b60056000815480929190611ae390614402565b919050555060405180610160016040528060055481526020018881526020018781526020018681526020018581526020018481526020018381526020018281526020016000151581526020013373ffffffffffffffffffffffffffffffffffffffff16815260200160001515815250600d6000600554815260200190815260200160002060008201518160000155602082015181600101556040820151816002019080519060200190611b979291906134fe565b50606082015181600301556080820151816004019080519060200190611bbe9291906134fe565b5060a0820151816005015560c0820151816006019080519060200190611be59291906134fe565b5060e0820151816007019080519060200190611c029291906134fe565b506101008201518160080160006101000a81548160ff0219169083151502179055506101208201518160080160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506101408201518160080160156101000a81548160ff021916908315150217905550905050600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600554908060018154018082558091505060019003906000526020600020016000909190919091505581604051611d069190614487565b6040518091039020837f25ff2b59e349aaa694ae2551d1f753e253e12d3821a2d2ce446fd75f464b23526005548a8a8a8a604051611d4895949392919061449e565b60405180910390a350505050505050565b6060600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015611de457602002820191906000526020600020905b815481526020019060010190808311611dd0575b50505050509050919050565b600033600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611e84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e7b90614571565b60405180910390fd5b611e8d336119b6565b8015611e9e5750611e9d836117be565b5b611edd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ed490614603565b60405180910390fd5b600d600084815260200190815260200160002060080160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415611f82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f7990614695565b60405180910390fd5b60076000815480929190611f9590614402565b91905055506040518061010001604052806007548152602001600d600086815260200190815260200160002060080160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018481526020016000600481111561203657612035613a52565b5b81526020016000151581526020014281526020016000600281111561205e5761205d613a52565b5b815250600e600060075481526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003015560808201518160040160006101000a81548160ff0219169083600481111561214357612142613a52565b5b021790555060a08201518160040160016101000a81548160ff02191690831515021790555060c0820151816005015560e08201518160060160006101000a81548160ff0219169083600281111561219d5761219c613a52565b5b0217905550905050600f6000600d600086815260200190815260200160002060080160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206007549080600181540180825580915050600190039060005260206000200160009091909190915055601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060075490806001815401808255809150506001900390600052602060002001600090919091909150557f034282114a310ea163ae0f80246510709b65fd1a25db69875e1b9bc6a96d2404600754846040516122de9291906146b5565b60405180910390a1600754915050919050565b60086020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600101805461233a906143d0565b80601f0160208091040260200160405190810160405280929190818152602001828054612366906143d0565b80156123b35780601f10612388576101008083540402835291602001916123b3565b820191906000526020600020905b81548152906001019060200180831161239657829003601f168201915b5050505050908060020154908060030180546123ce906143d0565b80601f01602080910402602001604051908101604052809291908181526020018280546123fa906143d0565b80156124475780601f1061241c57610100808354040283529160200191612447565b820191906000526020600020905b81548152906001019060200180831161242a57829003601f168201915b50505050509080600401805461245c906143d0565b80601f0160208091040260200160405190810160405280929190818152602001828054612488906143d0565b80156124d55780601f106124aa576101008083540402835291602001916124d5565b820191906000526020600020905b8154815290600101906020018083116124b857829003601f168201915b5050505050908060050180546124ea906143d0565b80601f0160208091040260200160405190810160405280929190818152602001828054612516906143d0565b80156125635780601f1061253857610100808354040283529160200191612563565b820191906000526020600020905b81548152906001019060200180831161254657829003601f168201915b505050505090806006018054612578906143d0565b80601f01602080910402602001604051908101604052809291908181526020018280546125a4906143d0565b80156125f15780601f106125c6576101008083540402835291602001916125f1565b820191906000526020600020905b8154815290600101906020018083116125d457829003601f168201915b505050505090806007018054612606906143d0565b80601f0160208091040260200160405190810160405280929190818152602001828054612632906143d0565b801561267f5780601f106126545761010080835404028352916020019161267f565b820191906000526020600020905b81548152906001019060200180831161266257829003601f168201915b5050505050908060080160009054906101000a900460ff16908060080160019054906101000a900460ff1690508a565b600d6020528060005260406000206000915090508060000154908060010154908060020180546126de906143d0565b80601f016020809104026020016040519081016040528092919081815260200182805461270a906143d0565b80156127575780601f1061272c57610100808354040283529160200191612757565b820191906000526020600020905b81548152906001019060200180831161273a57829003601f168201915b505050505090806003015490806004018054612772906143d0565b80601f016020809104026020016040519081016040528092919081815260200182805461279e906143d0565b80156127eb5780601f106127c0576101008083540402835291602001916127eb565b820191906000526020600020905b8154815290600101906020018083116127ce57829003601f168201915b505050505090806005015490806006018054612806906143d0565b80601f0160208091040260200160405190810160405280929190818152602001828054612832906143d0565b801561287f5780601f106128545761010080835404028352916020019161287f565b820191906000526020600020905b81548152906001019060200180831161286257829003601f168201915b505050505090806007018054612894906143d0565b80601f01602080910402602001604051908101604052809291908181526020018280546128c0906143d0565b801561290d5780601f106128e25761010080835404028352916020019161290d565b820191906000526020600020905b8154815290600101906020018083116128f057829003601f168201915b5050505050908060080160009054906101000a900460ff16908060080160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060080160159054906101000a900460ff1690508b565b33600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156129f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129ec90614571565b60405180910390fd5b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615612a4c57600080fd5b6001600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060046000815480929190612ab790614402565b9190505550600a600060018152602001908152602001600020339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503360096000600454815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040518061014001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200189815260200188815260200187815260200186815260200185815260200184815260200183815260200160001515815260200160011515815250600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019080519060200190612c899291906134fe565b50604082015181600201556060820151816003019080519060200190612cb09291906134fe565b506080820151816004019080519060200190612ccd9291906134fe565b5060a0820151816005019080519060200190612cea9291906134fe565b5060c0820151816006019080519060200190612d079291906134fe565b5060e0820151816007019080519060200190612d249291906134fe565b506101008201518160080160006101000a81548160ff0219169083151502179055506101208201518160080160016101000a81548160ff02191690831515021790555090505082604051612d789190614487565b604051809103902084604051612d8e9190614487565b60405180910390203373ffffffffffffffffffffffffffffffffffffffff167f07ade3a6b537840d0ba5e5a01af123418d19d953f218ee7d476a7091c7f124688b8b8b8b89604051612de49594939291906146de565b60405180910390a45050505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612e8857336040517fda3840b6000000000000000000000000000000000000000000000000000000008152600401612e7f9190614093565b60405180910390fd5b600080821415612e9b5760009050612ebd565b6001821415612ead5760019050612ebc565b6002821415612ebb57600290505b5b5b80600e600085815260200190815260200160002060060160006101000a81548160ff02191690836002811115612ef657612ef5613a52565b5b0217905550505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612f9257336040517fda3840b6000000000000000000000000000000000000000000000000000000008152600401612f899190614093565b60405180910390fd5b6001600d600083815260200190815260200160002060080160156101000a81548160ff02191690831515021790555050565b6000801515600e600084815260200190815260200160002060040160019054906101000a900460ff1615151415612ffe57600090506134f9565b6004600e600084815260200190815260200160002060040160006101000a81548160ff0219169083600481111561303857613037613a52565b5b0217905550600c6000600e600085815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600e60008481526020019081526020016000206003015490806001815401808255809150506001900390600052602060002001600090919091909150556000600c6000600e600086815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050905060005b8181101561340c57600e600085815260200190815260200160002060030154600c6000600e600088815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481106132155761321461474d565b5b906000526020600020015414156133f957600c6000600e600087815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001836132a89190614327565b815481106132b9576132b861474d565b5b9060005260206000200154600c6000600e600088815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811061334b5761334a61474d565b5b9060005260206000200181905550600c6000600e600087815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806133de576133dd61477c565b5b6001900381819060005260206000200160009055905561340c565b808061340490614402565b91505061316f565b506000600d6000600e600087815260200190815260200160002060030154815260200190815260200160002060080160006101000a81548160ff021916908315150217905550600e600084815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600d6000600e600087815260200190815260200160002060030154815260200190815260200160002060080160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019150505b919050565b82805461350a906143d0565b90600052602060002090601f01602090048101928261352c5760008555613573565b82601f1061354557805160ff1916838001178555613573565b82800160010185558215613573579182015b82811115613572578251825591602001919060010190613557565b5b5090506135809190613584565b5090565b5b8082111561359d576000816000905550600101613585565b5090565b6000819050919050565b6135b4816135a1565b82525050565b60006020820190506135cf60008301846135ab565b92915050565b6000604051905090565b600080fd5b600080fd5b6135f2816135a1565b81146135fd57600080fd5b50565b60008135905061360f816135e9565b92915050565b60006020828403121561362b5761362a6135df565b5b600061363984828501613600565b91505092915050565b60008115159050919050565b61365781613642565b82525050565b6000602082019050613672600083018461364e565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006136a382613678565b9050919050565b6136b381613698565b81146136be57600080fd5b50565b6000813590506136d0816136aa565b92915050565b6000602082840312156136ec576136eb6135df565b5b60006136fa848285016136c1565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613738816135a1565b82525050565b600061374a838361372f565b60208301905092915050565b6000602082019050919050565b600061376e82613703565b613778818561370e565b93506137838361371f565b8060005b838110156137b457815161379b888261373e565b97506137a683613756565b925050600181019050613787565b5085935050505092915050565b600060208201905081810360008301526137db8184613763565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61381881613698565b82525050565b600061382a838361380f565b60208301905092915050565b6000602082019050919050565b600061384e826137e3565b61385881856137ee565b9350613863836137ff565b8060005b8381101561389457815161387b888261381e565b975061388683613836565b925050600181019050613867565b5085935050505092915050565b600060208201905081810360008301526138bb8184613843565b905092915050565b6138cc81613698565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561390c5780820151818401526020810190506138f1565b8381111561391b576000848401525b50505050565b6000601f19601f8301169050919050565b600061393d826138d2565b61394781856138dd565b93506139578185602086016138ee565b61396081613921565b840191505092915050565b600061014082019050613981600083018d6138c3565b8181036020830152613993818c613932565b90506139a2604083018b6135ab565b81810360608301526139b4818a613932565b905081810360808301526139c88189613932565b905081810360a08301526139dc8188613932565b905081810360c08301526139f08187613932565b905081810360e0830152613a048186613932565b9050613a1461010083018561364e565b613a2261012083018461364e565b9b9a5050505050505050505050565b6000613a3c82613678565b9050919050565b613a4c81613a31565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60058110613a9257613a91613a52565b5b50565b6000819050613aa382613a81565b919050565b6000613ab382613a95565b9050919050565b613ac381613aa8565b82525050565b60038110613ada57613ad9613a52565b5b50565b6000819050613aeb82613ac9565b919050565b6000613afb82613add565b9050919050565b613b0b81613af0565b82525050565b600061010082019050613b27600083018b6135ab565b613b34602083018a613a43565b613b416040830189613a43565b613b4e60608301886135ab565b613b5b6080830187613aba565b613b6860a083018661364e565b613b7560c08301856135ab565b613b8260e0830184613b02565b9998505050505050505050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613bd182613921565b810181811067ffffffffffffffff82111715613bf057613bef613b99565b5b80604052505050565b6000613c036135d5565b9050613c0f8282613bc8565b919050565b600067ffffffffffffffff821115613c2f57613c2e613b99565b5b613c3882613921565b9050602081019050919050565b82818337600083830152505050565b6000613c67613c6284613c14565b613bf9565b905082815260208101848484011115613c8357613c82613b94565b5b613c8e848285613c45565b509392505050565b600082601f830112613cab57613caa613b8f565b5b8135613cbb848260208601613c54565b91505092915050565b600080600080600080600060e0888a031215613ce357613ce26135df565b5b6000613cf18a828b01613600565b975050602088013567ffffffffffffffff811115613d1257613d116135e4565b5b613d1e8a828b01613c96565b9650506040613d2f8a828b01613600565b955050606088013567ffffffffffffffff811115613d5057613d4f6135e4565b5b613d5c8a828b01613c96565b9450506080613d6d8a828b01613600565b93505060a088013567ffffffffffffffff811115613d8e57613d8d6135e4565b5b613d9a8a828b01613c96565b92505060c088013567ffffffffffffffff811115613dbb57613dba6135e4565b5b613dc78a828b01613c96565b91505092959891949750929550565b600061016082019050613dec600083018e6135ab565b613df9602083018d6135ab565b8181036040830152613e0b818c613932565b9050613e1a606083018b6135ab565b8181036080830152613e2c818a613932565b9050613e3b60a08301896135ab565b81810360c0830152613e4d8188613932565b905081810360e0830152613e618187613932565b9050613e7161010083018661364e565b613e7f610120830185613a43565b613e8d61014083018461364e565b9c9b505050505050505050505050565b600080600080600080600060e0888a031215613ebc57613ebb6135df565b5b600088013567ffffffffffffffff811115613eda57613ed96135e4565b5b613ee68a828b01613c96565b9750506020613ef78a828b01613600565b965050604088013567ffffffffffffffff811115613f1857613f176135e4565b5b613f248a828b01613c96565b955050606088013567ffffffffffffffff811115613f4557613f446135e4565b5b613f518a828b01613c96565b945050608088013567ffffffffffffffff811115613f7257613f716135e4565b5b613f7e8a828b01613c96565b93505060a088013567ffffffffffffffff811115613f9f57613f9e6135e4565b5b613fab8a828b01613c96565b92505060c088013567ffffffffffffffff811115613fcc57613fcb6135e4565b5b613fd88a828b01613c96565b91505092959891949750929550565b60008060408385031215613ffe57613ffd6135df565b5b600061400c85828601613600565b925050602061401d85828601613600565b9150509250929050565b7f796f7520617265206e6f7420636f6e74726163744f776e657200000000000000600082015250565b600061405d6019836138dd565b915061406882614027565b602082019050919050565b6000602082019050818103600083015261408c81614050565b9050919050565b60006020820190506140a860008301846138c3565b92915050565b7f4f776e6572204d55535420617070726f766520746f2073656c6c206173736574600082015250565b60006140e46020836138dd565b91506140ef826140ae565b602082019050919050565b60006020820190508181036000830152614113816140d7565b9050919050565b7f476f7665726e6d656e74204d55535420617070726f766520746865205472616e60008201527f73616374696f6e00000000000000000000000000000000000000000000000000602082015250565b60006141766027836138dd565b91506141818261411a565b604082019050919050565b600060208201905081810360008301526141a581614169565b9050919050565b7f5472616e73616374656420616d6f756e74206973206c6573736572207468616e60008201527f2063757272656e74204c616e6420707269636500000000000000000000000000602082015250565b60006142086033836138dd565b9150614213826141ac565b604082019050919050565b60006020820190508181036000830152614237816141fb565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614278826135a1565b9150614283836135a1565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156142bc576142bb61423e565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000614301826135a1565b915061430c836135a1565b92508261431c5761431b6142c7565b5b828204905092915050565b6000614332826135a1565b915061433d836135a1565b9250828210156143505761434f61423e565b5b828203905092915050565b600081905092915050565b50565b600061437660008361435b565b915061438182614366565b600082019050919050565b600061439782614369565b9150819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806143e857607f821691505b602082108114156143fc576143fb6143a1565b5b50919050565b600061440d826135a1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156144405761443f61423e565b5b600182019050919050565b600081905092915050565b6000614461826138d2565b61446b818561444b565b935061447b8185602086016138ee565b80840191505092915050565b60006144938284614456565b915081905092915050565b600060a0820190506144b360008301886135ab565b6144c060208301876135ab565b81810360408301526144d28186613932565b90506144e160608301856135ab565b81810360808301526144f38184613932565b90509695505050505050565b7f476f7665726e6d656e74206f6666696369616c2063616e6e6f7420726567697360008201527f7465722061732055736572000000000000000000000000000000000000000000602082015250565b600061455b602b836138dd565b9150614566826144ff565b604082019050919050565b6000602082019050818103600083015261458a8161454e565b9050919050565b7f5573657220616e64204c616e6420626f7468204d55535420626520766572696660008201527f6965640000000000000000000000000000000000000000000000000000000000602082015250565b60006145ed6023836138dd565b91506145f882614591565b604082019050919050565b6000602082019050818103600083015261461c816145e0565b9050919050565b7f4f776e65722063616e6e6f74207265717565737420666f7220627579696e672060008201527f6c616e6400000000000000000000000000000000000000000000000000000000602082015250565b600061467f6024836138dd565b915061468a82614623565b604082019050919050565b600060208201905081810360008301526146ae81614672565b9050919050565b60006040820190506146ca60008301856135ab565b6146d760208301846135ab565b9392505050565b600060a08201905081810360008301526146f88188613932565b905061470760208301876135ab565b81810360408301526147198186613932565b9050818103606083015261472d8185613932565b905081810360808301526147418184613932565b90509695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220f5301c2f719c777bf3aaa6266ea37bb8597caa2c38215e757d4b21b7365ac8ee64736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/Land.sol:Land",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 175,
        "contract": "contracts/Land.sol:Land",
        "label": "GovernmentOfficial",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 178,
        "contract": "contracts/Land.sol:Land",
        "label": "governmentFeesRate",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 181,
        "contract": "contracts/Land.sol:Land",
        "label": "count",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 265,
        "contract": "contracts/Land.sol:Land",
        "label": "userCount",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 267,
        "contract": "contracts/Land.sol:Land",
        "label": "landsCount",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 269,
        "contract": "contracts/Land.sol:Land",
        "label": "documentId",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 271,
        "contract": "contracts/Land.sol:Land",
        "label": "requestCount",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 276,
        "contract": "contracts/Land.sol:Land",
        "label": "UserMapping",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(User)244_storage)"
      },
      {
        "astId": 280,
        "contract": "contracts/Land.sol:Land",
        "label": "AllUsers",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 285,
        "contract": "contracts/Land.sol:Land",
        "label": "allUsersList",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 289,
        "contract": "contracts/Land.sol:Land",
        "label": "RegisteredUserMapping",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 294,
        "contract": "contracts/Land.sol:Land",
        "label": "MyLands",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 299,
        "contract": "contracts/Land.sol:Land",
        "label": "lands",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_struct(Landreg)223_storage)"
      },
      {
        "astId": 304,
        "contract": "contracts/Land.sol:Land",
        "label": "LandRequestMapping",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_struct(LandRequest)263_storage)"
      },
      {
        "astId": 309,
        "contract": "contracts/Land.sol:Land",
        "label": "MyReceivedLandRequest",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 314,
        "contract": "contracts/Land.sol:Land",
        "label": "MySentLandRequest",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 319,
        "contract": "contracts/Land.sol:Land",
        "label": "allLandList",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 324,
        "contract": "contracts/Land.sol:Land",
        "label": "paymentDoneList",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(GovernmentApprovalStatus)200": {
        "encoding": "inplace",
        "label": "enum Land.GovernmentApprovalStatus",
        "numberOfBytes": "1"
      },
      "t_enum(OwnerApprovalStatus)196": {
        "encoding": "inplace",
        "label": "enum Land.OwnerApprovalStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(User)244_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Land.User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)244_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(LandRequest)263_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Land.LandRequest)",
        "numberOfBytes": "32",
        "value": "t_struct(LandRequest)263_storage"
      },
      "t_mapping(t_uint256,t_struct(Landreg)223_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Land.Landreg)",
        "numberOfBytes": "32",
        "value": "t_struct(Landreg)223_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(LandRequest)263_storage": {
        "encoding": "inplace",
        "label": "struct Land.LandRequest",
        "members": [
          {
            "astId": 246,
            "contract": "contracts/Land.sol:Land",
            "label": "reqId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 248,
            "contract": "contracts/Land.sol:Land",
            "label": "sellerId",
            "offset": 0,
            "slot": "1",
            "type": "t_address_payable"
          },
          {
            "astId": 250,
            "contract": "contracts/Land.sol:Land",
            "label": "buyerId",
            "offset": 0,
            "slot": "2",
            "type": "t_address_payable"
          },
          {
            "astId": 252,
            "contract": "contracts/Land.sol:Land",
            "label": "landId",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 255,
            "contract": "contracts/Land.sol:Land",
            "label": "requestStatus",
            "offset": 0,
            "slot": "4",
            "type": "t_enum(OwnerApprovalStatus)196"
          },
          {
            "astId": 257,
            "contract": "contracts/Land.sol:Land",
            "label": "isPaymentDone",
            "offset": 1,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 259,
            "contract": "contracts/Land.sol:Land",
            "label": "requestTimestamp",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 262,
            "contract": "contracts/Land.sol:Land",
            "label": "govApprovalStatus",
            "offset": 0,
            "slot": "6",
            "type": "t_enum(GovernmentApprovalStatus)200"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Landreg)223_storage": {
        "encoding": "inplace",
        "label": "struct Land.Landreg",
        "members": [
          {
            "astId": 202,
            "contract": "contracts/Land.sol:Land",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 204,
            "contract": "contracts/Land.sol:Land",
            "label": "area",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 206,
            "contract": "contracts/Land.sol:Land",
            "label": "landAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 208,
            "contract": "contracts/Land.sol:Land",
            "label": "landPrice",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 210,
            "contract": "contracts/Land.sol:Land",
            "label": "allLatitudeLongitude",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 212,
            "contract": "contracts/Land.sol:Land",
            "label": "propertyPID",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 214,
            "contract": "contracts/Land.sol:Land",
            "label": "physicalSurveyNumber",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 216,
            "contract": "contracts/Land.sol:Land",
            "label": "document",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          },
          {
            "astId": 218,
            "contract": "contracts/Land.sol:Land",
            "label": "isforSell",
            "offset": 0,
            "slot": "8",
            "type": "t_bool"
          },
          {
            "astId": 220,
            "contract": "contracts/Land.sol:Land",
            "label": "ownerAddress",
            "offset": 1,
            "slot": "8",
            "type": "t_address_payable"
          },
          {
            "astId": 222,
            "contract": "contracts/Land.sol:Land",
            "label": "isLandVerified",
            "offset": 21,
            "slot": "8",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(User)244_storage": {
        "encoding": "inplace",
        "label": "struct Land.User",
        "members": [
          {
            "astId": 225,
            "contract": "contracts/Land.sol:Land",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 227,
            "contract": "contracts/Land.sol:Land",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 229,
            "contract": "contracts/Land.sol:Land",
            "label": "age",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 231,
            "contract": "contracts/Land.sol:Land",
            "label": "city",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 233,
            "contract": "contracts/Land.sol:Land",
            "label": "aadharNumber",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 235,
            "contract": "contracts/Land.sol:Land",
            "label": "panNumber",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 237,
            "contract": "contracts/Land.sol:Land",
            "label": "document",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 239,
            "contract": "contracts/Land.sol:Land",
            "label": "email",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          },
          {
            "astId": 241,
            "contract": "contracts/Land.sol:Land",
            "label": "isUserVerified",
            "offset": 0,
            "slot": "8",
            "type": "t_bool"
          },
          {
            "astId": 243,
            "contract": "contracts/Land.sol:Land",
            "label": "isExist",
            "offset": 1,
            "slot": "8",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}