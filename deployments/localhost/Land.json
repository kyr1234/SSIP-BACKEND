{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "msgSender",
          "type": "address"
        }
      ],
      "name": "NotGovernmentOfficial",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PaymentAlreadyCompleted",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "landID",
          "type": "uint256"
        }
      ],
      "name": "LandIsRequestedToBuy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_area",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_address",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "landPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_allLatiLongi",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_propertyPID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_surveyNum",
          "type": "string"
        }
      ],
      "name": "NewLandAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_age",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_city",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_aadharNumber",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_panNumber",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_document",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_email",
          "type": "string"
        }
      ],
      "name": "NewUserRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "UserVerified",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "LandRequestMapping",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reqId",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "sellerId",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "buyerId",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "landId",
          "type": "uint256"
        },
        {
          "internalType": "enum Land.reqStatus",
          "name": "requestStatus",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "isPaymentDone",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "requestTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ReturnAllLandList",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ReturnAllUserList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "UserMapping",
      "outputs": [
        {
          "internalType": "address",
          "name": "id",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "age",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "city",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "aadharNumber",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "panNumber",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "document",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "email",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "isUserVerified",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "acceptRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_area",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_address",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "landPrice",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_allLatiLongi",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_propertyPID",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_surveyNum",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_document",
          "type": "string"
        }
      ],
      "name": "addLand",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "changeContractOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "documentId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "isContractOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "isLandVerified",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "isUserRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "id",
          "type": "address"
        }
      ],
      "name": "isUserVerified",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "landPrices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lands",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "area",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "landAddress",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "landPrice",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "allLatitudeLongitude",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "propertyPID",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "physicalSurveyNumber",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "document",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "isforSell",
          "type": "bool"
        },
        {
          "internalType": "address payable",
          "name": "ownerAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isLandVerified",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "landsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "makePayment",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_reveiver",
          "type": "address"
        }
      ],
      "name": "makePaymentTestFun",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "id",
          "type": "address"
        }
      ],
      "name": "myAllLands",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "myReceivedLandRequests",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mySentLandRequests",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_age",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_city",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_aadharNumber",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_panNumber",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_document",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_email",
          "type": "string"
        }
      ],
      "name": "registerUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "rejectRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "requesteStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_landId",
          "type": "uint256"
        }
      ],
      "name": "requestforBuy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "returnPaymentDoneList",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "userCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "verifyLand",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userWalletAddress",
          "type": "address"
        }
      ],
      "name": "verifyUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc65ad962a8aff112ece23c56aae7f72b6eea1fe4e3bae58fb61ea1c1a9c0e51c",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "3160788",
    "logsBloom": "0x
    "blockHash": "0x68be635b166f5fcee95fdd4c84f97343c27c3c11da9bd6669ce99988b836d306",
    "transactionHash": "0xc65ad962a8aff112ece23c56aae7f72b6eea1fe4e3bae58fb61ea1c1a9c0e51c",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "3160788",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6e69de98f7b00e61f8ed287db90a68ac",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"}],\"name\":\"NotGovernmentOfficial\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PaymentAlreadyCompleted\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"landID\",\"type\":\"uint256\"}],\"name\":\"LandIsRequestedToBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_area\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_address\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"landPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_allLatiLongi\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_propertyPID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_surveyNum\",\"type\":\"string\"}],\"name\":\"NewLandAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_age\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_city\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_aadharNumber\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_panNumber\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_document\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_email\",\"type\":\"string\"}],\"name\":\"NewUserRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"UserVerified\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LandRequestMapping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reqId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"sellerId\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"buyerId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"landId\",\"type\":\"uint256\"},{\"internalType\":\"enum Land.reqStatus\",\"name\":\"requestStatus\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isPaymentDone\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"requestTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ReturnAllLandList\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ReturnAllUserList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"UserMapping\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"age\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"city\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"aadharNumber\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"panNumber\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"document\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isUserVerified\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"acceptRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_area\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_address\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"landPrice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_allLatiLongi\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_propertyPID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_surveyNum\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_document\",\"type\":\"string\"}],\"name\":\"addLand\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"changeContractOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"documentId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isContractOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"isLandVerified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isUserRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"}],\"name\":\"isUserVerified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"landPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lands\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"area\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"landAddress\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"landPrice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"allLatitudeLongitude\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"propertyPID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"physicalSurveyNumber\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"document\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isforSell\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isLandVerified\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"landsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"makePayment\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_reveiver\",\"type\":\"address\"}],\"name\":\"makePaymentTestFun\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"}],\"name\":\"myAllLands\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myReceivedLandRequests\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mySentLandRequests\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_age\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_city\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_aadharNumber\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_panNumber\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_document\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_email\",\"type\":\"string\"}],\"name\":\"registerUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"rejectRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"requesteStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_landId\",\"type\":\"uint256\"}],\"name\":\"requestforBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnPaymentDoneList\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"verifyLand\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userWalletAddress\",\"type\":\"address\"}],\"name\":\"verifyUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Land.sol\":\"Land\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Land.sol\":{\"content\":\"//SPDX-License-Identifier:MIT\\r\\n\\r\\npragma solidity ^0.8.7;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\ncontract Land is ReentrancyGuard {\\r\\n    address GovernmentOfficial;\\r\\n\\r\\n    constructor() {\\r\\n        GovernmentOfficial = msg.sender;\\r\\n    }\\r\\n\\r\\n    struct Landreg {\\r\\n        uint id;\\r\\n        //double area\\r\\n        uint area;\\r\\n        string landAddress;\\r\\n        uint landPrice;\\r\\n        string allLatitudeLongitude;\\r\\n        //string allLongitude;\\r\\n        uint propertyPID;\\r\\n        string physicalSurveyNumber;\\r\\n        string document;\\r\\n        //remove\\r\\n        bool isforSell;\\r\\n        address payable ownerAddress;\\r\\n        bool isLandVerified;\\r\\n    }\\r\\n\\r\\n    struct User {\\r\\n        address id;\\r\\n        string name;\\r\\n        uint age;\\r\\n        string city;\\r\\n        string aadharNumber;\\r\\n        string panNumber;\\r\\n        string document;\\r\\n        string email;\\r\\n        bool isUserVerified;\\r\\n    }\\r\\n\\r\\n    // If the current owner approves then only the buyer can send money\\r\\n\\r\\n    struct LandRequest {\\r\\n        uint reqId;\\r\\n        address payable sellerId;\\r\\n        address payable buyerId;\\r\\n        uint landId;\\r\\n        reqStatus requestStatus;\\r\\n        bool isPaymentDone;\\r\\n        uint requestTimestamp;\\r\\n    }\\r\\n\\r\\n    enum reqStatus {\\r\\n        requested,\\r\\n        accepted,\\r\\n        rejected,\\r\\n        paymentdone,\\r\\n        commpleted\\r\\n    }\\r\\n\\r\\n    // USER AND LAND MAPPING\\r\\n\\r\\n    uint public userCount;\\r\\n    uint public landsCount;\\r\\n    uint public documentId;\\r\\n    uint requestCount;\\r\\n\\r\\n    mapping(address => User) public UserMapping;\\r\\n\\r\\n    //REMOVE\\r\\n    mapping(uint => address) AllUsers;\\r\\n\\r\\n    //REMOVE\\r\\n    mapping(uint => address[]) allUsersList;\\r\\n\\r\\n    mapping(address => bool) RegisteredUserMapping;\\r\\n    mapping(address => uint[]) MyLands;\\r\\n\\r\\n    mapping(uint => Landreg) public lands;\\r\\n    mapping(uint => LandRequest) public LandRequestMapping;\\r\\n    mapping(address => uint[]) MyReceivedLandRequest;\\r\\n    mapping(address => uint[]) MySentLandRequest;\\r\\n\\r\\n    //remove\\r\\n    mapping(uint => uint[]) allLandList;\\r\\n\\r\\n    mapping(uint => uint[]) paymentDoneList;\\r\\n\\r\\n    // modifer\\r\\n    function isContractOwner(address _addr) public view returns (bool) {\\r\\n        if (_addr == GovernmentOfficial) return true;\\r\\n        else return false;\\r\\n    }\\r\\n\\r\\n    //remove\\r\\n    function changeContractOwner(address _addr) public {\\r\\n        require(msg.sender == GovernmentOfficial, \\\"you are not contractOwner\\\");\\r\\n        GovernmentOfficial = _addr;\\r\\n    }\\r\\n\\r\\n    //-----------------------------------------------User-----------------------------------------------\\r\\n\\r\\n    function isUserRegistered(address _addr) public view returns (bool) {\\r\\n        if (RegisteredUserMapping[_addr]) {\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    event NewUserRegistered(\\r\\n        address,\\r\\n        string _name,\\r\\n        uint _age,\\r\\n        string _city,\\r\\n        string _aadharNumber,\\r\\n        string _panNumber,\\r\\n        string _document,\\r\\n        string _email\\r\\n    );\\r\\n\\r\\n    function registerUser(\\r\\n        string memory _name,\\r\\n        uint _age,\\r\\n        string memory _city,\\r\\n        string memory _aadharNumber,\\r\\n        string memory _panNumber,\\r\\n        string memory _document,\\r\\n        string memory _email\\r\\n    ) public {\\r\\n        require(!RegisteredUserMapping[msg.sender]);\\r\\n\\r\\n        RegisteredUserMapping[msg.sender] = true;\\r\\n        userCount++;\\r\\n        allUsersList[1].push(msg.sender);\\r\\n        AllUsers[userCount] = msg.sender;\\r\\n        UserMapping[msg.sender] = User(\\r\\n            msg.sender,\\r\\n            _name,\\r\\n            _age,\\r\\n            _city,\\r\\n            _aadharNumber,\\r\\n            _panNumber,\\r\\n            _document,\\r\\n            _email,\\r\\n            false\\r\\n        );\\r\\n\\r\\n        emit NewUserRegistered(\\r\\n            msg.sender,\\r\\n            _name,\\r\\n            _age,\\r\\n            _city,\\r\\n            _aadharNumber,\\r\\n            _panNumber,\\r\\n            _document,\\r\\n            _email\\r\\n        );\\r\\n    }\\r\\n\\r\\n    error NotGovernmentOfficial(address msgSender);\\r\\n\\r\\n    modifier isGovernmentOfficial() {\\r\\n        if (msg.sender != GovernmentOfficial) {\\r\\n            revert NotGovernmentOfficial(msg.sender);\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    event UserVerified(address);\\r\\n\\r\\n    function verifyUser(address userWalletAddress) public isGovernmentOfficial {\\r\\n        UserMapping[userWalletAddress].isUserVerified = true;\\r\\n        emit UserVerified(userWalletAddress);\\r\\n    }\\r\\n\\r\\n    function isUserVerified(address id) public view returns (bool) {\\r\\n        return UserMapping[id].isUserVerified;\\r\\n    }\\r\\n\\r\\n    function ReturnAllUserList() public view returns (address[] memory) {\\r\\n        return allUsersList[1];\\r\\n    }\\r\\n\\r\\n    //-----------------------------------------------Land-----------------------------------------------\\r\\n    event NewLandAdded(\\r\\n        uint _area,\\r\\n        string _address,\\r\\n        uint landPrice,\\r\\n        string _allLatiLongi,\\r\\n        uint _propertyPID,\\r\\n        string _surveyNum\\r\\n    );\\r\\n\\r\\n    function addLand(\\r\\n        uint _area,\\r\\n        string memory _address,\\r\\n        uint landPrice,\\r\\n        string memory _allLatiLongi,\\r\\n        uint _propertyPID,\\r\\n        string memory _surveyNum,\\r\\n        string memory _document\\r\\n    ) public {\\r\\n        require(isUserVerified(msg.sender));\\r\\n        landsCount++;\\r\\n        lands[landsCount] = Landreg(\\r\\n            landsCount,\\r\\n            _area,\\r\\n            _address,\\r\\n            landPrice,\\r\\n            _allLatiLongi,\\r\\n            _propertyPID,\\r\\n            _surveyNum,\\r\\n            _document,\\r\\n            false,\\r\\n            payable(msg.sender),\\r\\n            false\\r\\n        );\\r\\n        MyLands[msg.sender].push(landsCount);\\r\\n\\r\\n        //  allLandList[1].push(landsCount);\\r\\n        emit NewLandAdded(\\r\\n            _area,\\r\\n            _address,\\r\\n            landPrice,\\r\\n            _allLatiLongi,\\r\\n            _propertyPID,\\r\\n            _surveyNum\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function ReturnAllLandList() public view returns (uint[] memory) {\\r\\n        return allLandList[1];\\r\\n    }\\r\\n\\r\\n    // modifier government official\\r\\n    function verifyLand(uint _id) public isGovernmentOfficial {\\r\\n        lands[_id].isLandVerified = true;\\r\\n    }\\r\\n\\r\\n    function isLandVerified(uint id) public view returns (bool) {\\r\\n        return lands[id].isLandVerified;\\r\\n    }\\r\\n\\r\\n    function myAllLands(address id) public view returns (uint[] memory) {\\r\\n        return MyLands[id];\\r\\n    }\\r\\n\\r\\n    /*     \\r\\n        function makeItforSell(uint id) public {\\r\\n        require(lands[id].ownerAddress == msg.sender);\\r\\n        lands[id].isforSell = true;\\r\\n    } \\r\\n    */\\r\\n\\r\\n    event LandIsRequestedToBuy(uint landID);\\r\\n\\r\\n    function requestforBuy(uint _landId) public {\\r\\n        require(isUserVerified(msg.sender) && isLandVerified(_landId));\\r\\n        requestCount++;\\r\\n        LandRequestMapping[requestCount] = LandRequest(\\r\\n            requestCount,\\r\\n            lands[_landId].ownerAddress,\\r\\n            payable(msg.sender),\\r\\n            _landId,\\r\\n            reqStatus.requested,\\r\\n            false,\\r\\n            block.timestamp\\r\\n        );\\r\\n        MyReceivedLandRequest[lands[_landId].ownerAddress].push(requestCount);\\r\\n        MySentLandRequest[msg.sender].push(requestCount);\\r\\n\\r\\n        emit LandIsRequestedToBuy(_landId);\\r\\n    }\\r\\n\\r\\n    function myReceivedLandRequests() public view returns (uint[] memory) {\\r\\n        return MyReceivedLandRequest[msg.sender];\\r\\n    }\\r\\n\\r\\n    function mySentLandRequests() public view returns (uint[] memory) {\\r\\n        return MySentLandRequest[msg.sender];\\r\\n    }\\r\\n\\r\\n    function acceptRequest(uint _requestId) public {\\r\\n        require(LandRequestMapping[_requestId].sellerId == msg.sender);\\r\\n        LandRequestMapping[_requestId].requestStatus = reqStatus.accepted;\\r\\n    }\\r\\n\\r\\n    function rejectRequest(uint _requestId) public {\\r\\n        require(LandRequestMapping[_requestId].sellerId == msg.sender);\\r\\n        LandRequestMapping[_requestId].requestStatus = reqStatus.rejected;\\r\\n    }\\r\\n\\r\\n    function requesteStatus(uint id) public view returns (bool) {\\r\\n        return LandRequestMapping[id].isPaymentDone;\\r\\n    }\\r\\n\\r\\n    function landPrices(uint id) public view returns (uint) {\\r\\n        return lands[id].landPrice;\\r\\n    }\\r\\n\\r\\n    error PaymentAlreadyCompleted();\\r\\n\\r\\n    function makePayment(uint _requestId) public payable {\\r\\n        require(\\r\\n            LandRequestMapping[_requestId].buyerId == msg.sender &&\\r\\n                LandRequestMapping[_requestId].requestStatus ==\\r\\n                reqStatus.accepted\\r\\n        );\\r\\n        if (LandRequestMapping[_requestId].isPaymentDone != false)\\r\\n            revert PaymentAlreadyCompleted();\\r\\n\\r\\n        LandRequestMapping[_requestId].requestStatus = reqStatus.paymentdone;\\r\\n        require(\\r\\n            msg.value >= lands[LandRequestMapping[_requestId].landId].landPrice,\\r\\n            \\\"Transacted amount is lesser than current Land price\\\"\\r\\n        );\\r\\n\\r\\n        lands[LandRequestMapping[_requestId].landId].ownerAddress.transfer(\\r\\n            msg.value\\r\\n        );\\r\\n        LandRequestMapping[_requestId].isPaymentDone = true;\\r\\n        paymentDoneList[1].push(_requestId);\\r\\n\\r\\n        transferOwnership(_requestId);\\r\\n    }\\r\\n\\r\\n    function returnPaymentDoneList() public view returns (uint[] memory) {\\r\\n        return paymentDoneList[1];\\r\\n    }\\r\\n\\r\\n    function transferOwnership(uint _requestId) internal returns (bool) {\\r\\n        if (LandRequestMapping[_requestId].isPaymentDone == false) return false;\\r\\n        // documentId++;\\r\\n        LandRequestMapping[_requestId].requestStatus = reqStatus.commpleted;\\r\\n        MyLands[LandRequestMapping[_requestId].buyerId].push(\\r\\n            LandRequestMapping[_requestId].landId\\r\\n        );\\r\\n\\r\\n        uint len = MyLands[LandRequestMapping[_requestId].sellerId].length;\\r\\n        for (uint i = 0; i < len; i++) {\\r\\n            if (\\r\\n                MyLands[LandRequestMapping[_requestId].sellerId][i] ==\\r\\n                LandRequestMapping[_requestId].landId\\r\\n            ) {\\r\\n                MyLands[LandRequestMapping[_requestId].sellerId][i] = MyLands[\\r\\n                    LandRequestMapping[_requestId].sellerId\\r\\n                ][len - 1];\\r\\n                MyLands[LandRequestMapping[_requestId].sellerId].pop();\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // lands[LandRequestMapping[_requestId].landId].document = documentUrl;\\r\\n        lands[LandRequestMapping[_requestId].landId].isforSell = false;\\r\\n        lands[LandRequestMapping[_requestId].landId]\\r\\n            .ownerAddress = LandRequestMapping[_requestId].buyerId;\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function makePaymentTestFun(address payable _reveiver) public payable {\\r\\n        _reveiver.transfer(msg.value);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa1bca5839c388636fcba017d6af363c36898845dcebb449e9de5bbae26e36ba6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101b75760003560e01c8063995a8d96116100ec578063d3b368c01161008a578063de11768811610064578063de11768814610638578063e261f1e514610675578063edfbe247146106bc578063f9c43bdf146106e5576101b7565b8063d3b368c01461058d578063d61ff68c146105b6578063d8513de4146105fb576101b7565b8063ace417e0116100c6578063ace417e0146104a7578063b10a30ed146104e4578063ccfdc19b14610527578063d196ebf214610550576101b7565b8063995a8d96146104355780639c32e3b414610451578063a846fc8f1461047c576101b7565b80634ba1f09811610159578063553a998d11610133578063553a998d146103655780636cbf6cf81461039057806378f7c83f146103cd5780637bb2d6db146103f8576101b7565b80634ba1f098146102f75780634d813120146103205780635114cb5214610349576101b7565b806323393d771161019557806323393d771461024f5780632d7788db1461027a5780633ead67b5146102a3578063499701b2146102cc576101b7565b806307973ccf146101bc578063163f7522146101e75780631c9afd0f14610224575b600080fd5b3480156101c857600080fd5b506101d161070e565b6040516101de9190612987565b60405180910390f35b3480156101f357600080fd5b5061020e60048036038101906102099190612a14565b610714565b60405161021b9190612a5c565b60405180910390f35b34801561023057600080fd5b5061023961077b565b6040516102469190612987565b60405180910390f35b34801561025b57600080fd5b50610264610781565b6040516102719190612b35565b60405180910390f35b34801561028657600080fd5b506102a1600480360381019061029c9190612b83565b6107eb565b005b3480156102af57600080fd5b506102ca60048036038101906102c59190612a14565b61089b565b005b3480156102d857600080fd5b506102e161096f565b6040516102ee9190612b35565b60405180910390f35b34801561030357600080fd5b5061031e60048036038101906103199190612b83565b610a04565b005b34801561032c57600080fd5b5061034760048036038101906103429190612a14565b610ab4565b005b610363600480360381019061035e9190612b83565b610bdb565b005b34801561037157600080fd5b5061037a610eb5565b6040516103879190612c6e565b60405180910390f35b34801561039c57600080fd5b506103b760048036038101906103b29190612b83565b610f55565b6040516103c49190612a5c565b60405180910390f35b3480156103d957600080fd5b506103e2610f82565b6040516103ef9190612987565b60405180910390f35b34801561040457600080fd5b5061041f600480360381019061041a9190612b83565b610f88565b60405161042c9190612987565b60405180910390f35b61044f600480360381019061044a9190612cce565b610fa8565b005b34801561045d57600080fd5b50610466610ff2565b6040516104739190612b35565b60405180910390f35b34801561048857600080fd5b50610491611087565b60405161049e9190612b35565b60405180910390f35b3480156104b357600080fd5b506104ce60048036038101906104c99190612a14565b6110f1565b6040516104db9190612a5c565b60405180910390f35b3480156104f057600080fd5b5061050b60048036038101906105069190612b83565b61114a565b60405161051e9796959493929190612d81565b60405180910390f35b34801561053357600080fd5b5061054e60048036038101906105499190612f36565b6111e6565b005b34801561055c57600080fd5b5061057760048036038101906105729190612a14565b61146a565b6040516105849190612b35565b60405180910390f35b34801561059957600080fd5b506105b460048036038101906105af9190612b83565b611501565b005b3480156105c257600080fd5b506105dd60048036038101906105d89190612a14565b61183d565b6040516105f2999897969594939291906130df565b60405180910390f35b34801561060757600080fd5b50610622600480360381019061061d9190612b83565b611be8565b60405161062f9190612a5c565b60405180910390f35b34801561064457600080fd5b5061065f600480360381019061065a9190612a14565b611c15565b60405161066c9190612a5c565b60405180910390f35b34801561068157600080fd5b5061069c60048036038101906106979190612b83565b611c80565b6040516106b39b9a99989796959493929190613196565b60405180910390f35b3480156106c857600080fd5b506106e360048036038101906106de919061325d565b611f34565b005b3480156106f157600080fd5b5061070c60048036038101906107079190612b83565b6122cd565b005b60025481565b6000600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156107715760019050610776565b600090505b919050565b60035481565b6060600f6000600181526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156107e157602002820191906000526020600020905b8154815260200190600101908083116107cd575b5050505050905090565b3373ffffffffffffffffffffffffffffffffffffffff16600c600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461085957600080fd5b6002600c600083815260200190815260200160002060040160006101000a81548160ff0219169083600481111561089357610892612d0a565b5b021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461092b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610922906133f3565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6060600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156109fa57602002820191906000526020600020905b8154815260200190600101908083116109e6575b5050505050905090565b3373ffffffffffffffffffffffffffffffffffffffff16600c600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610a7257600080fd5b6001600c600083815260200190815260200160002060040160006101000a81548160ff02191690836004811115610aac57610aab612d0a565b5b021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b4657336040517fda3840b6000000000000000000000000000000000000000000000000000000008152600401610b3d9190613413565b60405180910390fd5b6001600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060080160006101000a81548160ff0219169083151502179055507fa6625d2d26e786e2f473111bea4b2fcdbbf1863d883a2359989ce3a103d2972a81604051610bd09190613413565b60405180910390a150565b3373ffffffffffffffffffffffffffffffffffffffff16600c600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148015610c93575060016004811115610c5b57610c5a612d0a565b5b600c600083815260200190815260200160002060040160009054906101000a900460ff166004811115610c9157610c90612d0a565b5b145b610c9c57600080fd5b60001515600c600083815260200190815260200160002060040160019054906101000a900460ff16151514610cfd576040517f9a3e7d1c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6003600c600083815260200190815260200160002060040160006101000a81548160ff02191690836004811115610d3757610d36612d0a565b5b0217905550600b6000600c600084815260200190815260200160002060030154815260200190815260200160002060030154341015610dab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da2906134a0565b60405180910390fd5b600b6000600c600084815260200190815260200160002060030154815260200190815260200160002060080160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015610e3d573d6000803e3d6000fd5b506001600c600083815260200190815260200160002060040160016101000a81548160ff0219169083151502179055506010600060018152602001908152602001600020819080600181540180825580915050600190039060005260206000200160009091909190915055610eb181612391565b5050565b60606008600060018152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610f4b57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610f01575b5050505050905090565b6000600b600083815260200190815260200160002060080160159054906101000a900460ff169050919050565b60045481565b6000600b6000838152602001908152602001600020600301549050919050565b8073ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015610fee573d6000803e3d6000fd5b5050565b6060600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561107d57602002820191906000526020600020905b815481526020019060010190808311611069575b5050505050905090565b606060106000600181526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156110e757602002820191906000526020600020905b8154815260200190600101908083116110d3575b5050505050905090565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060080160009054906101000a900460ff169050919050565b600c6020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154908060040160009054906101000a900460ff16908060040160019054906101000a900460ff16908060050154905087565b6111ef336110f1565b6111f857600080fd5b6003600081548092919061120b906134ef565b919050555060405180610160016040528060035481526020018881526020018781526020018681526020018581526020018481526020018381526020018281526020016000151581526020013373ffffffffffffffffffffffffffffffffffffffff16815260200160001515815250600b60006003548152602001908152602001600020600082015181600001556020820151816001015560408201518160020190805190602001906112bf9291906128cb565b506060820151816003015560808201518160040190805190602001906112e69291906128cb565b5060a0820151816005015560c082015181600601908051906020019061130d9291906128cb565b5060e082015181600701908051906020019061132a9291906128cb565b506101008201518160080160006101000a81548160ff0219169083151502179055506101208201518160080160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506101408201518160080160156101000a81548160ff021916908315150217905550905050600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060035490806001815401808255809150506001900390600052602060002001600090919091909150557f3b1348216e9c8e522636d8c13e2a6b1f37796cce0ef8999040e0a5db1e30ce2687878787878760405161145996959493929190613538565b60405180910390a150505050505050565b6060600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156114f557602002820191906000526020600020905b8154815260200190600101908083116114e1575b50505050509050919050565b61150a336110f1565b801561151b575061151a81610f55565b5b61152457600080fd5b60056000815480929190611537906134ef565b91905055506040518060e001604052806005548152602001600b600084815260200190815260200160002060080160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff168152602001828152602001600060048111156115d7576115d6612d0a565b5b815260200160001515815260200142815250600c600060055481526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003015560808201518160040160006101000a81548160ff021916908360048111156116cb576116ca612d0a565b5b021790555060a08201518160040160016101000a81548160ff02191690831515021790555060c08201518160050155905050600d6000600b600084815260200190815260200160002060080160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206005549080600181540180825580915050600190039060005260206000200160009091909190915055600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060055490806001815401808255809150506001900390600052602060002001600090919091909150557ff913b9cb0629a4c667f7765a21dd9f5a9401db43947594658f40bae085fa8488816040516118329190612987565b60405180910390a150565b60066020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001018054611886906135dd565b80601f01602080910402602001604051908101604052809291908181526020018280546118b2906135dd565b80156118ff5780601f106118d4576101008083540402835291602001916118ff565b820191906000526020600020905b8154815290600101906020018083116118e257829003601f168201915b50505050509080600201549080600301805461191a906135dd565b80601f0160208091040260200160405190810160405280929190818152602001828054611946906135dd565b80156119935780601f1061196857610100808354040283529160200191611993565b820191906000526020600020905b81548152906001019060200180831161197657829003601f168201915b5050505050908060040180546119a8906135dd565b80601f01602080910402602001604051908101604052809291908181526020018280546119d4906135dd565b8015611a215780601f106119f657610100808354040283529160200191611a21565b820191906000526020600020905b815481529060010190602001808311611a0457829003601f168201915b505050505090806005018054611a36906135dd565b80601f0160208091040260200160405190810160405280929190818152602001828054611a62906135dd565b8015611aaf5780601f10611a8457610100808354040283529160200191611aaf565b820191906000526020600020905b815481529060010190602001808311611a9257829003601f168201915b505050505090806006018054611ac4906135dd565b80601f0160208091040260200160405190810160405280929190818152602001828054611af0906135dd565b8015611b3d5780601f10611b1257610100808354040283529160200191611b3d565b820191906000526020600020905b815481529060010190602001808311611b2057829003601f168201915b505050505090806007018054611b52906135dd565b80601f0160208091040260200160405190810160405280929190818152602001828054611b7e906135dd565b8015611bcb5780601f10611ba057610100808354040283529160200191611bcb565b820191906000526020600020905b815481529060010190602001808311611bae57829003601f168201915b5050505050908060080160009054906101000a900460ff16905089565b6000600c600083815260200190815260200160002060040160019054906101000a900460ff169050919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611c765760019050611c7b565b600090505b919050565b600b602052806000526040600020600091509050806000015490806001015490806002018054611caf906135dd565b80601f0160208091040260200160405190810160405280929190818152602001828054611cdb906135dd565b8015611d285780601f10611cfd57610100808354040283529160200191611d28565b820191906000526020600020905b815481529060010190602001808311611d0b57829003601f168201915b505050505090806003015490806004018054611d43906135dd565b80601f0160208091040260200160405190810160405280929190818152602001828054611d6f906135dd565b8015611dbc5780601f10611d9157610100808354040283529160200191611dbc565b820191906000526020600020905b815481529060010190602001808311611d9f57829003601f168201915b505050505090806005015490806006018054611dd7906135dd565b80601f0160208091040260200160405190810160405280929190818152602001828054611e03906135dd565b8015611e505780601f10611e2557610100808354040283529160200191611e50565b820191906000526020600020905b815481529060010190602001808311611e3357829003601f168201915b505050505090806007018054611e65906135dd565b80601f0160208091040260200160405190810160405280929190818152602001828054611e91906135dd565b8015611ede5780601f10611eb357610100808354040283529160200191611ede565b820191906000526020600020905b815481529060010190602001808311611ec157829003601f168201915b5050505050908060080160009054906101000a900460ff16908060080160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060080160159054906101000a900460ff1690508b565b600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611f8b57600080fd5b6001600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060026000815480929190611ff6906134ef565b91905055506008600060018152602001908152602001600020339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503360076000600254815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040518061012001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200188815260200187815260200186815260200185815260200184815260200183815260200182815260200160001515815250600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010190805190602001906121bf9291906128cb565b506040820151816002015560608201518160030190805190602001906121e69291906128cb565b5060808201518160040190805190602001906122039291906128cb565b5060a08201518160050190805190602001906122209291906128cb565b5060c082015181600601908051906020019061223d9291906128cb565b5060e082015181600701908051906020019061225a9291906128cb565b506101008201518160080160006101000a81548160ff0219169083151502179055509050507f07ade3a6b537840d0ba5e5a01af123418d19d953f218ee7d476a7091c7f1246833888888888888886040516122bc98979695949392919061360f565b60405180910390a150505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461235f57336040517fda3840b60000000000000000000000000000000000000000000000000000000081526004016123569190613413565b60405180910390fd5b6001600b600083815260200190815260200160002060080160156101000a81548160ff02191690831515021790555050565b6000801515600c600084815260200190815260200160002060040160019054906101000a900460ff16151514156123cb57600090506128c6565b6004600c600084815260200190815260200160002060040160006101000a81548160ff0219169083600481111561240557612404612d0a565b5b0217905550600a6000600c600085815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600c60008481526020019081526020016000206003015490806001815401808255809150506001900390600052602060002001600090919091909150556000600a6000600c600086815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050905060005b818110156127d957600c600085815260200190815260200160002060030154600a6000600c600088815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481106125e2576125e16136b7565b5b906000526020600020015414156127c657600a6000600c600087815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060018361267591906136e6565b81548110612686576126856136b7565b5b9060005260206000200154600a6000600c600088815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110612718576127176136b7565b5b9060005260206000200181905550600a6000600c600087815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806127ab576127aa61371a565b5b600190038181906000526020600020016000905590556127d9565b80806127d1906134ef565b91505061253c565b506000600b6000600c600087815260200190815260200160002060030154815260200190815260200160002060080160006101000a81548160ff021916908315150217905550600c600084815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600b6000600c600087815260200190815260200160002060030154815260200190815260200160002060080160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019150505b919050565b8280546128d7906135dd565b90600052602060002090601f0160209004810192826128f95760008555612940565b82601f1061291257805160ff1916838001178555612940565b82800160010185558215612940579182015b8281111561293f578251825591602001919060010190612924565b5b50905061294d9190612951565b5090565b5b8082111561296a576000816000905550600101612952565b5090565b6000819050919050565b6129818161296e565b82525050565b600060208201905061299c6000830184612978565b92915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006129e1826129b6565b9050919050565b6129f1816129d6565b81146129fc57600080fd5b50565b600081359050612a0e816129e8565b92915050565b600060208284031215612a2a57612a296129ac565b5b6000612a38848285016129ff565b91505092915050565b60008115159050919050565b612a5681612a41565b82525050565b6000602082019050612a716000830184612a4d565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612aac8161296e565b82525050565b6000612abe8383612aa3565b60208301905092915050565b6000602082019050919050565b6000612ae282612a77565b612aec8185612a82565b9350612af783612a93565b8060005b83811015612b28578151612b0f8882612ab2565b9750612b1a83612aca565b925050600181019050612afb565b5085935050505092915050565b60006020820190508181036000830152612b4f8184612ad7565b905092915050565b612b608161296e565b8114612b6b57600080fd5b50565b600081359050612b7d81612b57565b92915050565b600060208284031215612b9957612b986129ac565b5b6000612ba784828501612b6e565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612be5816129d6565b82525050565b6000612bf78383612bdc565b60208301905092915050565b6000602082019050919050565b6000612c1b82612bb0565b612c258185612bbb565b9350612c3083612bcc565b8060005b83811015612c61578151612c488882612beb565b9750612c5383612c03565b925050600181019050612c34565b5085935050505092915050565b60006020820190508181036000830152612c888184612c10565b905092915050565b6000612c9b826129b6565b9050919050565b612cab81612c90565b8114612cb657600080fd5b50565b600081359050612cc881612ca2565b92915050565b600060208284031215612ce457612ce36129ac565b5b6000612cf284828501612cb9565b91505092915050565b612d0481612c90565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60058110612d4a57612d49612d0a565b5b50565b6000819050612d5b82612d39565b919050565b6000612d6b82612d4d565b9050919050565b612d7b81612d60565b82525050565b600060e082019050612d96600083018a612978565b612da36020830189612cfb565b612db06040830188612cfb565b612dbd6060830187612978565b612dca6080830186612d72565b612dd760a0830185612a4d565b612de460c0830184612978565b98975050505050505050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612e4382612dfa565b810181811067ffffffffffffffff82111715612e6257612e61612e0b565b5b80604052505050565b6000612e756129a2565b9050612e818282612e3a565b919050565b600067ffffffffffffffff821115612ea157612ea0612e0b565b5b612eaa82612dfa565b9050602081019050919050565b82818337600083830152505050565b6000612ed9612ed484612e86565b612e6b565b905082815260208101848484011115612ef557612ef4612df5565b5b612f00848285612eb7565b509392505050565b600082601f830112612f1d57612f1c612df0565b5b8135612f2d848260208601612ec6565b91505092915050565b600080600080600080600060e0888a031215612f5557612f546129ac565b5b6000612f638a828b01612b6e565b975050602088013567ffffffffffffffff811115612f8457612f836129b1565b5b612f908a828b01612f08565b9650506040612fa18a828b01612b6e565b955050606088013567ffffffffffffffff811115612fc257612fc16129b1565b5b612fce8a828b01612f08565b9450506080612fdf8a828b01612b6e565b93505060a088013567ffffffffffffffff81111561300057612fff6129b1565b5b61300c8a828b01612f08565b92505060c088013567ffffffffffffffff81111561302d5761302c6129b1565b5b6130398a828b01612f08565b91505092959891949750929550565b613051816129d6565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613091578082015181840152602081019050613076565b838111156130a0576000848401525b50505050565b60006130b182613057565b6130bb8185613062565b93506130cb818560208601613073565b6130d481612dfa565b840191505092915050565b6000610120820190506130f5600083018c613048565b8181036020830152613107818b6130a6565b9050613116604083018a612978565b818103606083015261312881896130a6565b9050818103608083015261313c81886130a6565b905081810360a083015261315081876130a6565b905081810360c083015261316481866130a6565b905081810360e083015261317881856130a6565b9050613188610100830184612a4d565b9a9950505050505050505050565b6000610160820190506131ac600083018e612978565b6131b9602083018d612978565b81810360408301526131cb818c6130a6565b90506131da606083018b612978565b81810360808301526131ec818a6130a6565b90506131fb60a0830189612978565b81810360c083015261320d81886130a6565b905081810360e083015261322181876130a6565b9050613231610100830186612a4d565b61323f610120830185612cfb565b61324d610140830184612a4d565b9c9b505050505050505050505050565b600080600080600080600060e0888a03121561327c5761327b6129ac565b5b600088013567ffffffffffffffff81111561329a576132996129b1565b5b6132a68a828b01612f08565b97505060206132b78a828b01612b6e565b965050604088013567ffffffffffffffff8111156132d8576132d76129b1565b5b6132e48a828b01612f08565b955050606088013567ffffffffffffffff811115613305576133046129b1565b5b6133118a828b01612f08565b945050608088013567ffffffffffffffff811115613332576133316129b1565b5b61333e8a828b01612f08565b93505060a088013567ffffffffffffffff81111561335f5761335e6129b1565b5b61336b8a828b01612f08565b92505060c088013567ffffffffffffffff81111561338c5761338b6129b1565b5b6133988a828b01612f08565b91505092959891949750929550565b7f796f7520617265206e6f7420636f6e74726163744f776e657200000000000000600082015250565b60006133dd601983613062565b91506133e8826133a7565b602082019050919050565b6000602082019050818103600083015261340c816133d0565b9050919050565b60006020820190506134286000830184613048565b92915050565b7f5472616e73616374656420616d6f756e74206973206c6573736572207468616e60008201527f2063757272656e74204c616e6420707269636500000000000000000000000000602082015250565b600061348a603383613062565b91506134958261342e565b604082019050919050565b600060208201905081810360008301526134b98161347d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006134fa8261296e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561352d5761352c6134c0565b5b600182019050919050565b600060c08201905061354d6000830189612978565b818103602083015261355f81886130a6565b905061356e6040830187612978565b818103606083015261358081866130a6565b905061358f6080830185612978565b81810360a08301526135a181846130a6565b9050979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806135f557607f821691505b60208210811415613609576136086135ae565b5b50919050565b600061010082019050613625600083018b613048565b8181036020830152613637818a6130a6565b90506136466040830189612978565b818103606083015261365881886130a6565b9050818103608083015261366c81876130a6565b905081810360a083015261368081866130a6565b905081810360c083015261369481856130a6565b905081810360e08301526136a881846130a6565b90509998505050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006136f18261296e565b91506136fc8361296e565b92508282101561370f5761370e6134c0565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea26469706673582212200d7bb229c5776a73290ecbfb9952978f374385ea6d0b9e570567c748f3b94e6464736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/Land.sol:Land",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 175,
        "contract": "contracts/Land.sol:Land",
        "label": "GovernmentOfficial",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 250,
        "contract": "contracts/Land.sol:Land",
        "label": "userCount",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 252,
        "contract": "contracts/Land.sol:Land",
        "label": "landsCount",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 254,
        "contract": "contracts/Land.sol:Land",
        "label": "documentId",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 256,
        "contract": "contracts/Land.sol:Land",
        "label": "requestCount",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 261,
        "contract": "contracts/Land.sol:Land",
        "label": "UserMapping",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_struct(User)226_storage)"
      },
      {
        "astId": 265,
        "contract": "contracts/Land.sol:Land",
        "label": "AllUsers",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 270,
        "contract": "contracts/Land.sol:Land",
        "label": "allUsersList",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 274,
        "contract": "contracts/Land.sol:Land",
        "label": "RegisteredUserMapping",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 279,
        "contract": "contracts/Land.sol:Land",
        "label": "MyLands",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 284,
        "contract": "contracts/Land.sol:Land",
        "label": "lands",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_struct(Landreg)207_storage)"
      },
      {
        "astId": 289,
        "contract": "contracts/Land.sol:Land",
        "label": "LandRequestMapping",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_struct(LandRequest)242_storage)"
      },
      {
        "astId": 294,
        "contract": "contracts/Land.sol:Land",
        "label": "MyReceivedLandRequest",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 299,
        "contract": "contracts/Land.sol:Land",
        "label": "MySentLandRequest",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 304,
        "contract": "contracts/Land.sol:Land",
        "label": "allLandList",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 309,
        "contract": "contracts/Land.sol:Land",
        "label": "paymentDoneList",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(reqStatus)248": {
        "encoding": "inplace",
        "label": "enum Land.reqStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(User)226_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Land.User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)226_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(LandRequest)242_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Land.LandRequest)",
        "numberOfBytes": "32",
        "value": "t_struct(LandRequest)242_storage"
      },
      "t_mapping(t_uint256,t_struct(Landreg)207_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Land.Landreg)",
        "numberOfBytes": "32",
        "value": "t_struct(Landreg)207_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(LandRequest)242_storage": {
        "encoding": "inplace",
        "label": "struct Land.LandRequest",
        "members": [
          {
            "astId": 228,
            "contract": "contracts/Land.sol:Land",
            "label": "reqId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 230,
            "contract": "contracts/Land.sol:Land",
            "label": "sellerId",
            "offset": 0,
            "slot": "1",
            "type": "t_address_payable"
          },
          {
            "astId": 232,
            "contract": "contracts/Land.sol:Land",
            "label": "buyerId",
            "offset": 0,
            "slot": "2",
            "type": "t_address_payable"
          },
          {
            "astId": 234,
            "contract": "contracts/Land.sol:Land",
            "label": "landId",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 237,
            "contract": "contracts/Land.sol:Land",
            "label": "requestStatus",
            "offset": 0,
            "slot": "4",
            "type": "t_enum(reqStatus)248"
          },
          {
            "astId": 239,
            "contract": "contracts/Land.sol:Land",
            "label": "isPaymentDone",
            "offset": 1,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 241,
            "contract": "contracts/Land.sol:Land",
            "label": "requestTimestamp",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Landreg)207_storage": {
        "encoding": "inplace",
        "label": "struct Land.Landreg",
        "members": [
          {
            "astId": 186,
            "contract": "contracts/Land.sol:Land",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 188,
            "contract": "contracts/Land.sol:Land",
            "label": "area",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 190,
            "contract": "contracts/Land.sol:Land",
            "label": "landAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 192,
            "contract": "contracts/Land.sol:Land",
            "label": "landPrice",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 194,
            "contract": "contracts/Land.sol:Land",
            "label": "allLatitudeLongitude",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 196,
            "contract": "contracts/Land.sol:Land",
            "label": "propertyPID",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 198,
            "contract": "contracts/Land.sol:Land",
            "label": "physicalSurveyNumber",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 200,
            "contract": "contracts/Land.sol:Land",
            "label": "document",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          },
          {
            "astId": 202,
            "contract": "contracts/Land.sol:Land",
            "label": "isforSell",
            "offset": 0,
            "slot": "8",
            "type": "t_bool"
          },
          {
            "astId": 204,
            "contract": "contracts/Land.sol:Land",
            "label": "ownerAddress",
            "offset": 1,
            "slot": "8",
            "type": "t_address_payable"
          },
          {
            "astId": 206,
            "contract": "contracts/Land.sol:Land",
            "label": "isLandVerified",
            "offset": 21,
            "slot": "8",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(User)226_storage": {
        "encoding": "inplace",
        "label": "struct Land.User",
        "members": [
          {
            "astId": 209,
            "contract": "contracts/Land.sol:Land",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 211,
            "contract": "contracts/Land.sol:Land",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 213,
            "contract": "contracts/Land.sol:Land",
            "label": "age",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 215,
            "contract": "contracts/Land.sol:Land",
            "label": "city",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 217,
            "contract": "contracts/Land.sol:Land",
            "label": "aadharNumber",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 219,
            "contract": "contracts/Land.sol:Land",
            "label": "panNumber",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 221,
            "contract": "contracts/Land.sol:Land",
            "label": "document",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 223,
            "contract": "contracts/Land.sol:Land",
            "label": "email",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          },
          {
            "astId": 225,
            "contract": "contracts/Land.sol:Land",
            "label": "isUserVerified",
            "offset": 0,
            "slot": "8",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}