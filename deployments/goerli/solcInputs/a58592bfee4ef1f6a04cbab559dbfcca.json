{
  "language": "Solidity",
  "sources": {
    "contracts/Land.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.0;\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\n\r\ncontract Land is ReentrancyGuard {\r\n    address GovernmentOfficial;\r\n    uint public governmentFeesRate = 4;\r\n\r\n    constructor() {\r\n        GovernmentOfficial = msg.sender;\r\n    }\r\n\r\n    enum OwnerApprovalStatus {\r\n        REQUESTED,\r\n        ACCEPTED,\r\n        REJECTED,\r\n        PAYMENT_DONE,\r\n        COMPLETED\r\n    }\r\n\r\n    enum GovernmentApprovalStatus {\r\n        PENDING,\r\n        ACCEPTED,\r\n        REJECTED\r\n    }\r\n\r\n    struct Landreg {\r\n        uint id;\r\n        //double area\r\n        uint area;\r\n        string landAddress;\r\n        uint landPrice;\r\n        string allLatitudeLongitude;\r\n        //string allLongitude;\r\n        uint propertyPID;\r\n        string physicalSurveyNumber;\r\n        string document;\r\n        //remove\r\n        bool isforSell;\r\n        address payable ownerAddress;\r\n        bool isLandVerified;\r\n    }\r\n\r\n    struct User {\r\n        address id;\r\n        string name;\r\n        uint age;\r\n        string city;\r\n        string aadharNumber;\r\n        string panNumber;\r\n        string document;\r\n        string email;\r\n        bool isUserVerified;\r\n        bool isExist;\r\n    }\r\n\r\n    // If the current owner approves then only the buyer can send money\r\n    struct LandRequest {\r\n        uint reqId;\r\n        address payable sellerId;\r\n        address payable buyerId;\r\n        uint landId;\r\n        OwnerApprovalStatus requestStatus;\r\n        bool isPaymentDone;\r\n        uint requestTimestamp;\r\n        GovernmentApprovalStatus govApprovalStatus;\r\n    }\r\n\r\n    // USER AND LAND MAPPING\r\n    uint public userCount;\r\n    uint public landsCount;\r\n    uint public documentId;\r\n    uint requestCount;\r\n\r\n    mapping(address => User) public UserMapping;\r\n\r\n    //REMOVE\r\n    mapping(uint => address) AllUsers;\r\n\r\n    //REMOVE\r\n    mapping(uint => address[]) allUsersList;\r\n\r\n    mapping(address => bool) RegisteredUserMapping;\r\n    mapping(address => uint[]) MyLands;\r\n\r\n    mapping(uint => Landreg) public lands;\r\n    mapping(uint => LandRequest) public LandRequestMapping;\r\n    mapping(address => uint[]) MyReceivedLandRequest;\r\n    mapping(address => uint[]) MySentLandRequest;\r\n\r\n    //remove\r\n    mapping(uint => uint[]) allLandList;\r\n\r\n    mapping(uint => uint[]) paymentDoneList;\r\n\r\n    //remove\r\n    function changeContractOwner(address _addr) public {\r\n        require(msg.sender == GovernmentOfficial, \"you are not contractOwner\");\r\n        GovernmentOfficial = _addr;\r\n    }\r\n\r\n    //-----------------------------------------------User-----------------------------------------------\r\n\r\n    function isUserRegistered(address _addr) external view returns (bool) {\r\n        if (RegisteredUserMapping[_addr]) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    event NewUserRegistered(\r\n        address indexed useraddress,\r\n        string _name,\r\n        uint _age,\r\n        string _city,\r\n        string _aadharNumber,\r\n        string indexed _panNumber,\r\n        string indexed _document,\r\n        string _email\r\n    );\r\n\r\n    modifier UserNotGovernmentOfficial(address sender) {\r\n        require(\r\n            sender != GovernmentOfficial,\r\n            \"Government official cannot register as User\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function registerUser(\r\n        string memory _name,\r\n        uint _age,\r\n        string memory _city,\r\n        string memory _aadharNumber,\r\n        string memory _panNumber,\r\n        string memory _document,\r\n        string memory _email\r\n    ) public UserNotGovernmentOfficial(msg.sender) {\r\n        require(!RegisteredUserMapping[msg.sender]);\r\n\r\n        RegisteredUserMapping[msg.sender] = true;\r\n        userCount++;\r\n        allUsersList[1].push(msg.sender);\r\n        AllUsers[userCount] = msg.sender;\r\n        UserMapping[msg.sender] = User(\r\n            msg.sender,\r\n            _name,\r\n            _age,\r\n            _city,\r\n            _aadharNumber,\r\n            _panNumber,\r\n            _document,\r\n            _email,\r\n            false,\r\n            true\r\n        );\r\n\r\n        emit NewUserRegistered(\r\n            msg.sender,\r\n            _name,\r\n            _age,\r\n            _city,\r\n            _aadharNumber,\r\n            _panNumber,\r\n            _document,\r\n            _email\r\n        );\r\n    }\r\n\r\n    error NotGovernmentOfficial(address msgSender);\r\n\r\n    modifier isGovernmentOfficial() {\r\n        if (msg.sender != GovernmentOfficial) {\r\n            revert NotGovernmentOfficial(msg.sender);\r\n        }\r\n        _;\r\n    }\r\n\r\n    function changeGovernmentFeesRate(uint rate) external isGovernmentOfficial {\r\n        governmentFeesRate = rate;\r\n    }\r\n\r\n    event UserVerified(address);\r\n\r\n    function verifyUser(address userWalletAddress) public isGovernmentOfficial {\r\n        UserMapping[userWalletAddress].isUserVerified = true;\r\n        emit UserVerified(userWalletAddress);\r\n    }\r\n\r\n    function isUserVerified(address id) public view returns (bool) {\r\n        return UserMapping[id].isUserVerified;\r\n    }\r\n\r\n    function ReturnAllUserList() public view returns (address[] memory) {\r\n        return allUsersList[1];\r\n    }\r\n\r\n    //-----------------------------------------------Land-----------------------------------------------\r\n    event NewLandAdded(\r\n        uint landID,\r\n        uint _area,\r\n        string _address,\r\n        uint landPrice,\r\n        string _allLatiLongi,\r\n        uint indexed _propertyPID,\r\n        string indexed _surveyNum\r\n    );\r\n\r\n    function addLand(\r\n        uint _area,\r\n        string memory _address,\r\n        uint landPrice,\r\n        string memory _allLatiLongi,\r\n        uint _propertyPID,\r\n        string memory _surveyNum,\r\n        string memory _document\r\n    ) public {\r\n        require(isUserVerified(msg.sender));\r\n        landsCount++;\r\n        lands[landsCount] = Landreg(\r\n            landsCount,\r\n            _area,\r\n            _address,\r\n            landPrice,\r\n            _allLatiLongi,\r\n            _propertyPID,\r\n            _surveyNum,\r\n            _document,\r\n            false,\r\n            payable(msg.sender),\r\n            false\r\n        );\r\n        MyLands[msg.sender].push(landsCount);\r\n\r\n        //  allLandList[1].push(landsCount);\r\n        emit NewLandAdded(\r\n            landsCount,\r\n            _area,\r\n            _address,\r\n            landPrice,\r\n            _allLatiLongi,\r\n            _propertyPID,\r\n            _surveyNum\r\n        );\r\n    }\r\n\r\n    function ReturnAllLandList() public view returns (uint[] memory) {\r\n        return allLandList[1];\r\n    }\r\n\r\n    // modifier government official\r\n    function verifyLand(uint _id) public isGovernmentOfficial {\r\n        lands[_id].isLandVerified = true;\r\n    }\r\n\r\n    function isLandVerified(uint id) public view returns (bool) {\r\n        return lands[id].isLandVerified;\r\n    }\r\n\r\n    function myAllLands(address id) public view returns (uint[] memory) {\r\n        return MyLands[id];\r\n    }\r\n\r\n    /*     \r\n        function makeItforSell(uint id) public {\r\n        require(lands[id].ownerAddress == msg.sender);\r\n        lands[id].isforSell = true;\r\n    } \r\n    */\r\n\r\n    event LandIsRequestedToBuy(uint requestID, uint landID);\r\n\r\n    function requestforBuy(uint _landId)\r\n        public\r\n        UserNotGovernmentOfficial(msg.sender)\r\n        returns (uint)\r\n    {\r\n        require(\r\n            isUserVerified(msg.sender) && isLandVerified(_landId),\r\n            \"User and Land both MUST be verified\"\r\n        );\r\n        require(\r\n            msg.sender != lands[_landId].ownerAddress,\r\n            \"Owner cannot request for buying land\"\r\n        );\r\n\r\n        requestCount++;\r\n        LandRequestMapping[requestCount] = LandRequest(\r\n            requestCount,\r\n            lands[_landId].ownerAddress,\r\n            payable(msg.sender),\r\n            _landId,\r\n            OwnerApprovalStatus.REQUESTED,\r\n            false,\r\n            block.timestamp,\r\n            GovernmentApprovalStatus.PENDING\r\n        );\r\n        MyReceivedLandRequest[lands[_landId].ownerAddress].push(requestCount);\r\n        MySentLandRequest[msg.sender].push(requestCount);\r\n\r\n        emit LandIsRequestedToBuy(requestCount, _landId);\r\n        return requestCount;\r\n    }\r\n\r\n    function myReceivedLandRequests() public view returns (uint[] memory) {\r\n        return MyReceivedLandRequest[msg.sender];\r\n    }\r\n\r\n    function mySentLandRequests() public view returns (uint[] memory) {\r\n        return MySentLandRequest[msg.sender];\r\n    }\r\n\r\n    function acceptRequest(uint _requestId) public {\r\n        require(LandRequestMapping[_requestId].sellerId == msg.sender);\r\n        LandRequestMapping[_requestId].requestStatus = OwnerApprovalStatus\r\n            .ACCEPTED;\r\n    }\r\n\r\n    function rejectRequest(uint _requestId) public {\r\n        require(LandRequestMapping[_requestId].sellerId == msg.sender);\r\n        LandRequestMapping[_requestId].requestStatus = OwnerApprovalStatus\r\n            .REJECTED;\r\n    }\r\n\r\n    function isUserRequestFulfilled(uint id) public view returns (bool) {\r\n        return LandRequestMapping[id].isPaymentDone;\r\n    }\r\n\r\n    function landPrices(uint id) public view returns (uint) {\r\n        return lands[id].landPrice;\r\n    }\r\n\r\n    modifier GovernmentApprovalCheck(uint _requestId) {\r\n        require(\r\n            LandRequestMapping[_requestId].requestStatus ==\r\n                OwnerApprovalStatus.ACCEPTED,\r\n            \"Owner MUST approve to sell asset\"\r\n        );\r\n        require(\r\n            LandRequestMapping[_requestId].govApprovalStatus ==\r\n                GovernmentApprovalStatus.ACCEPTED,\r\n            \"Government MUST approve the Transaction\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function changeGovernmentStatus(uint _requestID, uint status)\r\n        public\r\n        isGovernmentOfficial\r\n    {\r\n        GovernmentApprovalStatus g = GovernmentApprovalStatus.PENDING;\r\n\r\n        if (status == 0) {\r\n            g = GovernmentApprovalStatus.PENDING;\r\n        } else if (status == 1) {\r\n            g = GovernmentApprovalStatus.ACCEPTED;\r\n        } else if (status == 2) {\r\n            g = GovernmentApprovalStatus.REJECTED;\r\n        }\r\n\r\n        LandRequestMapping[_requestID].govApprovalStatus = g;\r\n    }\r\n\r\n    error PaymentAlreadyCompleted();\r\n    error TransactionFailed();\r\n\r\n    function makePayment(uint _requestId)\r\n        public\r\n        payable\r\n        GovernmentApprovalCheck(_requestId)\r\n    {\r\n        require(\r\n            LandRequestMapping[_requestId].buyerId == msg.sender &&\r\n                LandRequestMapping[_requestId].requestStatus ==\r\n                OwnerApprovalStatus.ACCEPTED\r\n        );\r\n        if (LandRequestMapping[_requestId].isPaymentDone != false)\r\n            revert PaymentAlreadyCompleted();\r\n\r\n        LandRequestMapping[_requestId].requestStatus = OwnerApprovalStatus\r\n            .PAYMENT_DONE;\r\n        require(\r\n            msg.value >= lands[LandRequestMapping[_requestId].landId].landPrice,\r\n            \"Transacted amount is lesser than current Land price\"\r\n        );\r\n\r\n        uint transferAmount = msg.value;\r\n        uint governmentFeesAmount;\r\n        governmentFeesAmount = (governmentFeesRate * transferAmount) / 100;\r\n        transferAmount -= governmentFeesAmount;\r\n\r\n        (bool govTxStatus, ) = payable(GovernmentOfficial).call{\r\n            value: governmentFeesAmount\r\n        }(\"\");\r\n        if (!govTxStatus) revert TransactionFailed();\r\n\r\n        address currentAssetOwner = lands[LandRequestMapping[_requestId].landId]\r\n            .ownerAddress;\r\n        (bool Tx, ) = payable(currentAssetOwner).call{value: transferAmount}(\r\n            \"\"\r\n        );\r\n        if (!Tx) revert TransactionFailed();\r\n\r\n        LandRequestMapping[_requestId].isPaymentDone = true;\r\n        paymentDoneList[1].push(_requestId);\r\n\r\n        transferOwnership(_requestId);\r\n    }\r\n\r\n    function returnPaymentDoneList() public view returns (uint[] memory) {\r\n        return paymentDoneList[1];\r\n    }\r\n\r\n    function transferOwnership(uint _requestId) internal returns (bool) {\r\n        if (LandRequestMapping[_requestId].isPaymentDone == false) return false;\r\n        // documentId++;\r\n        LandRequestMapping[_requestId].requestStatus = OwnerApprovalStatus\r\n            .COMPLETED;\r\n        MyLands[LandRequestMapping[_requestId].buyerId].push(\r\n            LandRequestMapping[_requestId].landId\r\n        );\r\n\r\n        uint len = MyLands[LandRequestMapping[_requestId].sellerId].length;\r\n        for (uint i = 0; i < len; i++) {\r\n            if (\r\n                MyLands[LandRequestMapping[_requestId].sellerId][i] ==\r\n                LandRequestMapping[_requestId].landId\r\n            ) {\r\n                MyLands[LandRequestMapping[_requestId].sellerId][i] = MyLands[\r\n                    LandRequestMapping[_requestId].sellerId\r\n                ][len - 1];\r\n                MyLands[LandRequestMapping[_requestId].sellerId].pop();\r\n                break;\r\n            }\r\n        }\r\n\r\n        // lands[LandRequestMapping[_requestId].landId].document = documentUrl;\r\n        lands[LandRequestMapping[_requestId].landId].isforSell = false;\r\n        lands[LandRequestMapping[_requestId].landId]\r\n            .ownerAddress = LandRequestMapping[_requestId].buyerId;\r\n\r\n        return true;\r\n    }\r\n\r\n    function getUserByAddress(address userAddress)\r\n        external\r\n        view\r\n        returns (\r\n            address,\r\n            string memory,\r\n            uint,\r\n            string memory,\r\n            string memory,\r\n            string memory,\r\n            string memory,\r\n            string memory,\r\n            bool,\r\n            bool\r\n        )\r\n    {\r\n        User memory u = UserMapping[userAddress];\r\n        return (\r\n            u.id,\r\n            u.name,\r\n            u.age,\r\n            u.city,\r\n            u.aadharNumber,\r\n            u.panNumber,\r\n            u.document,\r\n            u.email,\r\n            u.isUserVerified,\r\n            u.isExist\r\n        );\r\n    }\r\n\r\n    function getgovfee() public view returns (uint) {\r\n        return governmentFeesRate;\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}